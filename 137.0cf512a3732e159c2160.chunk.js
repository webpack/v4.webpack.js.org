(window.webpackJsonp=window.webpackJsonp||[]).push([[137],{398:function(n,s,a){"use strict";a.r(s),s.default='<p><a href="https://npmjs.com/package/copy-webpack-plugin"><img src="https://img.shields.io/npm/v/copy-webpack-plugin.svg" alt="npm"></a>\n<a href="https://nodejs.org/"><img src="https://img.shields.io/node/v/copy-webpack-plugin.svg" alt="node"></a>\n<a href="https://david-dm.org/webpack-contrib/copy-webpack-plugin"><img src="https://david-dm.org/webpack-contrib/copy-webpack-plugin.svg" alt="deps"></a>\n<a href="https://github.com/webpack-contrib/copy-webpack-plugin/actions"><img src="https://github.com/webpack-contrib/copy-webpack-plugin/workflows/copy-webpack-plugin/badge.svg" alt="tests"></a>\n<a href="https://codecov.io/gh/webpack-contrib/copy-webpack-plugin"><img src="https://codecov.io/gh/webpack-contrib/copy-webpack-plugin/branch/master/graph/badge.svg" alt="cover"></a>\n<a href="https://gitter.im/webpack/webpack"><img src="https://img.shields.io/badge/gitter-webpack%2Fwebpack-brightgreen.svg" alt="chat"></a>\n<a href="https://packagephobia.now.sh/result?p=copy-webpack-plugin"><img src="https://packagephobia.now.sh/badge?p=copy-webpack-plugin" alt="size"></a></p>\n<p>Copies individual files or entire directories, which already exist, to the build directory.</p>\n<h2 id="getting-started">Getting Started<a href="#getting-started" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>To begin, you\'ll need to install <code>copy-webpack-plugin</code>:</p>\n<pre><code class="hljs language-console">npm install copy-webpack-plugin --save-dev\n</code></pre>\n<p>Then add the plugin to your <code>webpack</code> config. For example:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js"><span class="token keyword">const</span> CopyPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"copy-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">"source"</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token string">"dest"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">"other"</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token string">"public"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<blockquote>\n<p>ℹ️ <code>copy-webpack-plugin</code> is not designed to copy files generated from the build process; rather, it is to copy files that already exist in the source tree, as part of the build process.</p>\n<p>ℹ️ If you want <code>webpack-dev-server</code> to write files to the output directory during development, you can force it with the <a href="https://github.com/webpack/webpack-dev-middleware#writetodisk"><code>writeToDisk</code></a> option or the <a href="https://github.com/gajus/write-file-webpack-plugin"><code>write-file-webpack-plugin</code></a>.</p>\n<p>ℹ️ You can get the original source filename from <a href="/api/stats/#asset-objects">Asset Objects</a>.</p>\n</blockquote>\n<h2 id="options">Options<a href="#options" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<table>\n<thead>\n<tr>\n<th align="center">Name</th>\n<th align="center">Type</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Description</p></div>\n<div class="content"><p><strong><a href="#patterns"><code>patterns</code></a></strong><p class="description mobile"><code>{Array&#x3C;String\\|Object>}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Array&#x3C;String\\|Object>}</code></td>\n<td align="left">Specify file related patterns for plugin</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Description</p></div>\n<div class="content"><p><strong><a href="#options-1"><code>options</code></a></strong><p class="description mobile"><code>{Object}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Object}</code></td>\n<td align="left">Specify options for plugin</td>\n</tr>\n</tbody>\n</table>\n<p>The plugin\'s signature:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js"><span class="token keyword">const</span> CopyPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"copy-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">"source"</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token string">"dest"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">"other"</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token string">"public"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        concurrency<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h3 id="patterns">Patterns<a href="#patterns" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<table>\n<thead>\n<tr>\n<th align="center">Name</th>\n<th align="center">Type</th>\n<th align="center">Default</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#from"><code>from</code></a><p class="description mobile"><code>{String}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{String}</code></td>\n<td align="center"><code>undefined</code></td>\n<td align="left">Glob or path from where we copy files.</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#to"><code>to</code></a><p class="description mobile"><code>{String\\|Function}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{String\\|Function}</code></td>\n<td align="center"><code>compiler.options.output</code></td>\n<td align="left">Output path.</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#context"><code>context</code></a><p class="description mobile"><code>{String}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{String}</code></td>\n<td align="center"><code>options.context \\|\\| compiler.options.context</code></td>\n<td align="left">A path that determines how to interpret the \n<code>from</code>\n path.</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#globoptions"><code>globOptions</code></a><p class="description mobile"><code>{Object}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Object}</code></td>\n<td align="center"><code>undefined</code></td>\n<td align="left"><a href="https://github.com/sindresorhus/globby#options">Options</a>\n passed to the glob pattern matching library including \n<code>ignore</code>\n option.</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#filter"><code>filter</code></a><p class="description mobile"><code>{Function}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Function}</code></td>\n<td align="center"><code>undefined</code></td>\n<td align="left">Allows to filter copied assets.</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#totype"><code>toType</code></a><p class="description mobile"><code>{String}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{String}</code></td>\n<td align="center"><code>undefined</code></td>\n<td align="left">Determinate what is \n<code>to</code>\n option - directory, file or template.</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#force"><code>force</code></a><p class="description mobile"><code>{Boolean}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Boolean}</code></td>\n<td align="center"><code>false</code></td>\n<td align="left">Overwrites files already in \n<code>compilation.assets</code>\n (usually added by other plugins/loaders).</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#priority"><code>priority</code></a><p class="description mobile"><code>{Number}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Number}</code></td>\n<td align="center"><code>0</code></td>\n<td align="left">Allows you to specify the copy priority.</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#transform"><code>transform</code></a><p class="description mobile"><code>{Object}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Object}</code></td>\n<td align="center"><code>undefined</code></td>\n<td align="left">Allows to modify the file contents. Enable \n<code>transform</code>\n caching. You can use \n<code>{ transform: {cache: { key: \'my-cache-key\' }} }</code>\n to invalidate the cache.</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#transformall"><code>transformAll</code></a><p class="description mobile"><code>{Function}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Function}</code></td>\n<td align="center"><code>undefined</code></td>\n<td align="left">Allows you to modify the contents of multiple files and save the result to one file.</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#noerroronmissing"><code>noErrorOnMissing</code></a><p class="description mobile"><code>{Boolean}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Boolean}</code></td>\n<td align="center"><code>false</code></td>\n<td align="left">Doesn\'t generate an error on missing file(s).</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#info"><code>info</code></a><p class="description mobile"><code>{Object\\|Function}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Object\\|Function}</code></td>\n<td align="center"><code>undefined</code></td>\n<td align="left">Allows to add assets info.</td>\n</tr>\n</tbody>\n</table>\n<h4 id="from"><code>from</code><a href="#from" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>Type: <code>String</code>\nDefault: <code>undefined</code></p>\n<p>Glob or path from where we copy files.\nGlobs accept <a href="https://github.com/mrmlnc/fast-glob#pattern-syntax">fast-glob pattern-syntax</a>.\nGlob can only be a <code>string</code>.</p>\n<blockquote>\n<p>⚠️ Don\'t use directly <code>\\\\</code> in <code>from</code> option if it is a <code>glob</code> (i.e <code>path\\to\\file.ext</code>) option because on UNIX the backslash is a valid character inside a path component, i.e., it\'s not a separator.\nOn Windows, the forward slash and the backward slash are both separators.\nInstead please use <code>/</code>.</p>\n</blockquote>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token string">"relative/path/to/file.ext"</span><span class="token punctuation">,</span>\n        <span class="token string">"relative/path/to/dir"</span><span class="token punctuation">,</span>\n        path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">,</span> <span class="token string">"file.ext"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">,</span> <span class="token string">"dir"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token string">"**/*"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">"**/*"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token comment">// If absolute path is a `glob` we replace backslashes with forward slashes, because only forward slashes can be used in the `glob`</span>\n        path<span class="token punctuation">.</span>posix<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>\n          path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\\\\/g</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token string">"*.txt"</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h5 id="for-windows"><code>For windows</code><a href="#for-windows" aria-hidden="true"><span class="icon icon-link"></span></a></h5>\n<p>If you define <code>from</code> as absolute file path or absolute folder path on <code>Windows</code>, you can use windows path segment (<code>\\\\</code>)</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"file.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>But you should always use forward-slashes in <code>glob</code> expressions\nSee <a href="https://github.com/mrmlnc/fast-glob#how-to-write-patterns-on-windows">fast-glob manual</a>.</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token comment">// If absolute path is a `glob` we replace backslashes with forward slashes, because only forward slashes can be used in the `glob`</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span>posix<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>\n            path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"fixtures"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\\\\/g</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token string">"*.txt"</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>The <code>context</code> behaves differently depending on what the <code>from</code> is (<code>glob</code>, <code>file</code> or <code>dir</code>).\nMore <a href="#examples"><code>examples</code></a></p>\n<h4 id="to"><code>to</code><a href="#to" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>Type: <code>String|Function</code>\nDefault: <code>compiler.options.output</code></p>\n<h5 id="string">String<a href="#string" aria-hidden="true"><span class="icon icon-link"></span></a></h5>\n<p>Output path.</p>\n<blockquote>\n<p>⚠️ Don\'t use directly <code>\\\\</code> in <code>to</code> (i.e <code>path\\to\\dest</code>) option because on UNIX the backslash is a valid character inside a path component, i.e., it\'s not a separator.\nOn Windows, the forward slash and the backward slash are both separators.\nInstead please use <code>/</code> or <code>path</code> methods.</p>\n</blockquote>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">"**/*"</span><span class="token punctuation">,</span>\n          to<span class="token punctuation">:</span> <span class="token string">"relative/path/to/dest/"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">"**/*"</span><span class="token punctuation">,</span>\n          to<span class="token punctuation">:</span> <span class="token string">"/absolute/path/to/dest/"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">"**/*"</span><span class="token punctuation">,</span>\n          to<span class="token punctuation">:</span> <span class="token string">"[path][name].[contenthash][ext]"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h5 id="function">Function<a href="#function" aria-hidden="true"><span class="icon icon-link"></span></a></h5>\n<p>Allows to modify the writing path.</p>\n<blockquote>\n<p>⚠️ Don\'t return directly <code>\\\\</code> in <code>to</code> (i.e <code>path\\to\\newFile</code>) option because on UNIX the backslash is a valid character inside a path component, i.e., it\'s not a separator.\nOn Windows, the forward slash and the backward slash are both separators.\nInstead please use <code>/</code> or <code>path</code> methods.</p>\n</blockquote>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">"src/*.png"</span><span class="token punctuation">,</span>\n          <span class="token function">to</span><span class="token punctuation">(</span><span class="token punctuation">{</span> context<span class="token punctuation">,</span> absoluteFilename <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token string">"dest/newPath/[name][ext]"</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">"src/*.png"</span><span class="token punctuation">,</span>\n          <span class="token function">to</span><span class="token punctuation">(</span><span class="token punctuation">{</span> context<span class="token punctuation">,</span> absoluteFilename <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"dest/newPath/[name][ext]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h4 id="context"><code>context</code><a href="#context" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>Type: <code>String</code>\nDefault: <code>options.context|compiler.options.context</code></p>\n<p>A path that determines how to interpret the <code>from</code> path.</p>\n<blockquote>\n<p>⚠️ Don\'t use directly <code>\\\\</code> in <code>context</code> (i.e <code>path\\to\\context</code>) option because on UNIX the backslash is a valid character inside a path component, i.e., it\'s not a separator.\nOn Windows, the forward slash and the backward slash are both separators.\nInstead please use <code>/</code> or <code>path</code> methods.</p>\n</blockquote>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">"src/*.txt"</span><span class="token punctuation">,</span>\n          to<span class="token punctuation">:</span> <span class="token string">"dest/"</span><span class="token punctuation">,</span>\n          context<span class="token punctuation">:</span> <span class="token string">"app/"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>The <code>context</code> option can be an absolute or relative path. If <code>context</code> is a relative, then it is converted to absolute based to <code>compiler.options.context</code></p>\n<p>Also, <code>context</code> indicates how to interpret the search results. Further, he is considered in this role.</p>\n<p>To determine the structure from which the found resources will be copied to the destination folder, the <code>context</code> option is used.</p>\n<p>If <code>from</code> is a file, then <code>context</code> is equal to the directory in which this file is located. Accordingly, the result will be only the file name.</p>\n<p>If <code>from</code> is a directory, then <code>context</code> is the same as <code>from</code> and is equal to the directory itself. In this case, the result will be a hierarchical structure of the found folders and files relative to the specified directory.</p>\n<p>If <code>from</code> is a glob, then regardless of the <code>context</code> option, the result will be the structure specified in the <code>from</code> option</p>\n<p>More <a href="#examples"><code>examples</code></a></p>\n<h4 id="globoptions"><code>globOptions</code><a href="#globoptions" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>Type: <code>Object</code>\nDefault: <code>undefined</code></p>\n<p>Allows to configute the glob pattern matching library used by the plugin. <a href="https://github.com/sindresorhus/globby#options">See the list of supported options</a>\nTo exclude files from the selection, you should use <a href="https://github.com/mrmlnc/fast-glob#ignore">globOptions.ignore option</a></p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">"public/**/*"</span><span class="token punctuation">,</span>\n          globOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            dot<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n            gitignore<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n            ignore<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"**/file.*"</span><span class="token punctuation">,</span> <span class="token string">"**/ignored-directory/**"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h4 id="filter"><code>filter</code><a href="#filter" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>Type: <code>Function</code>\nDefault: <code>undefined</code></p>\n<blockquote>\n<p>ℹ️ To ignore files by path please use the <a href="#globoptions"><code>globOptions.ignore</code></a> option.</p>\n</blockquote>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>promise<span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">"public/**/*"</span><span class="token punctuation">,</span>\n          filter<span class="token punctuation">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>resourcePath<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span>promises<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>resourcePath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">const</span> content <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>content <span class="token operator">===</span> <span class="token string">"my-custom-content"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h4 id="totype"><code>toType</code><a href="#totype" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>Type: <code>String</code>\nDefault: <code>undefined</code></p>\n<p>Determinate what is <code>to</code> option - directory, file or template.\nSometimes it is hard to say what is <code>to</code>, example <code>path/to/dir-with.ext</code>.\nIf you want to copy files in directory you need use <code>dir</code> option.\nWe try to automatically determine the <code>type</code> so you most likely do not need this option.</p>\n<table>\n<thead>\n<tr>\n<th align="center">Name</th>\n<th align="center">Type</th>\n<th align="center">Default</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><strong><a href="#dir"><code>\'dir\'</code></a></strong><p class="description mobile"><code>{String}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{String}</code></td>\n<td align="center"><code>undefined</code></td>\n<td align="left">If \n<code>to</code>\n has no extension or ends on \n<code>\'/\'</code></td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><strong><a href="#file"><code>\'file\'</code></a></strong><p class="description mobile"><code>{String}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{String}</code></td>\n<td align="center"><code>undefined</code></td>\n<td align="left">If \n<code>to</code>\n is not a directory and is not a template</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><strong><a href="#template"><code>\'template\'</code></a></strong><p class="description mobile"><code>{String}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{String}</code></td>\n<td align="center"><code>undefined</code></td>\n<td align="left">If \n<code>to</code>\n contains \n<a href="/configuration/output/#template-strings">a template pattern</a></td>\n</tr>\n</tbody>\n</table>\n<h5 id="dir"><code>\'dir\'</code><a href="#dir" aria-hidden="true"><span class="icon icon-link"></span></a></h5>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">"path/to/file.txt"</span><span class="token punctuation">,</span>\n          to<span class="token punctuation">:</span> <span class="token string">"directory/with/extension.ext"</span><span class="token punctuation">,</span>\n          toType<span class="token punctuation">:</span> <span class="token string">"dir"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h5 id="file"><code>\'file\'</code><a href="#file" aria-hidden="true"><span class="icon icon-link"></span></a></h5>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">"path/to/file.txt"</span><span class="token punctuation">,</span>\n          to<span class="token punctuation">:</span> <span class="token string">"file/without/extension"</span><span class="token punctuation">,</span>\n          toType<span class="token punctuation">:</span> <span class="token string">"file"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h5 id="template"><code>\'template\'</code><a href="#template" aria-hidden="true"><span class="icon icon-link"></span></a></h5>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">"src/"</span><span class="token punctuation">,</span>\n          to<span class="token punctuation">:</span> <span class="token string">"dest/[name].[contenthash][ext]"</span><span class="token punctuation">,</span>\n          toType<span class="token punctuation">:</span> <span class="token string">"template"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h4 id="force"><code>force</code><a href="#force" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>Type: <code>Boolean</code>\nDefault: <code>false</code></p>\n<p>Overwrites files already in <code>compilation.assets</code> (usually added by other plugins/loaders).</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">"src/**/*"</span><span class="token punctuation">,</span>\n          to<span class="token punctuation">:</span> <span class="token string">"dest/"</span><span class="token punctuation">,</span>\n          force<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h4 id="priority"><code>priority</code><a href="#priority" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>Type: <code>Number</code>\nDefault: <code>0</code></p>\n<p>Allows to specify the priority of copying files with the same destination name.\nFiles for patterns with higher priority will be copied later.\nTo overwrite files, the <a href="#force"><code>force</code></a> option must be enabled.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token comment">// Copied second and will overwrite "dir_2/file.txt"</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">"dir_1/file.txt"</span><span class="token punctuation">,</span>\n          to<span class="token punctuation">:</span> <span class="token string">"newfile.txt"</span><span class="token punctuation">,</span>\n          force<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n          priority<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token comment">// Copied first</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">"dir_2/file.txt"</span><span class="token punctuation">,</span>\n          to<span class="token punctuation">:</span> <span class="token string">"newfile.txt"</span><span class="token punctuation">,</span>\n          priority<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h4 id="transform"><code>transform</code><a href="#transform" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>Type: <code>Function|Object</code>\nDefault: <code>undefined</code></p>\n<p>Allows to modify the file contents.</p>\n<h5 id="function-1"><code>Function</code><a href="#function-1" aria-hidden="true"><span class="icon icon-link"></span></a></h5>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">"src/*.png"</span><span class="token punctuation">,</span>\n          to<span class="token punctuation">:</span> <span class="token string">"dest/"</span><span class="token punctuation">,</span>\n          <span class="token comment">// The `content` argument is a [`Buffer`](https://nodejs.org/api/buffer.html) object, it could be converted to a `String` to be processed using `content.toString()`</span>\n          <span class="token operator">/</span><span class="token operator">/</span> The <span class="token template-string"><span class="token string">`absoluteFrom`</span></span> argument is a `String`<span class="token punctuation">,</span> it is absolute path <span class="token keyword">from</span> where the file is being copied\n          <span class="token function">transform</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> absoluteFrom<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token function">optimize</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h5 id="object"><code>Object</code><a href="#object" aria-hidden="true"><span class="icon icon-link"></span></a></h5>\n<table>\n<thead>\n<tr>\n<th align="center">Name</th>\n<th align="center">Type</th>\n<th align="center">Default</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><strong><a href="#transformer"><code>transformer</code></a></strong><p class="description mobile"><code>{Function}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Function}</code></td>\n<td align="center"><code>undefined</code></td>\n<td align="left">Allows to modify the file contents.</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><strong><a href="#cache"><code>cache</code></a></strong><p class="description mobile"><code>{Boolean\\|Object}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Boolean\\|Object}</code></td>\n<td align="center"><code>false</code></td>\n<td align="left">Enable \n<code>transform</code>\n caching. You can use \n<code>transform: { cache: { key: \'my-cache-key\' } }</code>\n to invalidate the cache.</td>\n</tr>\n</tbody>\n</table>\n<h6 id="transformer"><code>transformer</code><a href="#transformer" aria-hidden="true"><span class="icon icon-link"></span></a></h6>\n<p>Type: <code>Function</code>\nDefault: <code>undefined</code></p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">"src/*.png"</span><span class="token punctuation">,</span>\n          to<span class="token punctuation">:</span> <span class="token string">"dest/"</span><span class="token punctuation">,</span>\n          <span class="token comment">// The `content` argument is a [`Buffer`](https://nodejs.org/api/buffer.html) object, it could be converted to a `String` to be processed using `content.toString()`</span>\n          <span class="token operator">/</span><span class="token operator">/</span> The <span class="token template-string"><span class="token string">`absoluteFrom`</span></span> argument is a `String`<span class="token punctuation">,</span> it is absolute path <span class="token keyword">from</span> where the file is being copied\n          transform<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            <span class="token function">transformer</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> absoluteFrom<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token keyword">return</span> <span class="token function">optimize</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">"src/*.png"</span><span class="token punctuation">,</span>\n          to<span class="token punctuation">:</span> <span class="token string">"dest/"</span><span class="token punctuation">,</span>\n          transform<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            <span class="token function">transformer</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">optimize</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h6 id="cache"><code>cache</code><a href="#cache" aria-hidden="true"><span class="icon icon-link"></span></a></h6>\n<p>Type: <code>Boolean|Object</code>\nDefault: <code>false</code></p>\n<p><strong>webpack.config.js</strong></p>\n<p>Enable/disable and configure caching.\nDefault path to cache directory: <code>node_modules/.cache/copy-webpack-plugin</code>.</p>\n<h6 id="boolean"><code>Boolean</code><a href="#boolean" aria-hidden="true"><span class="icon icon-link"></span></a></h6>\n<p>Enables/Disable <code>transform</code> caching.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">"src/*.png"</span><span class="token punctuation">,</span>\n          to<span class="token punctuation">:</span> <span class="token string">"dest/"</span><span class="token punctuation">,</span>\n          transform<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            <span class="token function">transformer</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token keyword">return</span> <span class="token function">optimize</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            cache<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h5 id="object-1"><code>Object</code><a href="#object-1" aria-hidden="true"><span class="icon icon-link"></span></a></h5>\n<p>Enables <code>transform</code> caching and setup cache directory and invalidation keys.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">"src/*.png"</span><span class="token punctuation">,</span>\n          to<span class="token punctuation">:</span> <span class="token string">"dest/"</span><span class="token punctuation">,</span>\n          transform<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            <span class="token function">transformer</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token keyword">return</span> <span class="token function">optimize</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            cache<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n              directory<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"cache-directory"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n              keys<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                <span class="token comment">// May be useful for invalidating cache based on external values</span>\n                <span class="token operator">/</span><span class="token operator">/</span> For example<span class="token punctuation">,</span> you can invalid cache based on <span class="token template-string"><span class="token string">`process.version`</span></span> <span class="token operator">-</span> <span class="token punctuation">{</span> node<span class="token punctuation">:</span> process<span class="token punctuation">.</span>version <span class="token punctuation">}</span>\n                key<span class="token punctuation">:</span> <span class="token string">"value"</span><span class="token punctuation">,</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>You can setup invalidation keys using a function.</p>\n<p>Simple function:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">"src/*.png"</span><span class="token punctuation">,</span>\n          to<span class="token punctuation">:</span> <span class="token string">"dest/"</span><span class="token punctuation">,</span>\n          transform<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            <span class="token function">transformer</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token keyword">return</span> <span class="token function">optimize</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            cache<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n              directory<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"cache-directory"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n              keys<span class="token punctuation">:</span> <span class="token punctuation">(</span>defaultCacheKeys<span class="token punctuation">,</span> absoluteFrom<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n                <span class="token keyword">const</span> keys <span class="token operator">=</span> <span class="token function">getCustomCacheInvalidationKeysSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                <span class="token keyword">return</span> <span class="token punctuation">{</span>\n                  <span class="token operator">...</span>defaultCacheKeys<span class="token punctuation">,</span>\n                  keys<span class="token punctuation">,</span>\n                <span class="token punctuation">}</span><span class="token punctuation">;</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Async function:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">"src/*.png"</span><span class="token punctuation">,</span>\n          to<span class="token punctuation">:</span> <span class="token string">"dest/"</span><span class="token punctuation">,</span>\n          transform<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            <span class="token function">transformer</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token keyword">return</span> <span class="token function">optimize</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            cache<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n              directory<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"cache-directory"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n              keys<span class="token punctuation">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>defaultCacheKeys<span class="token punctuation">,</span> absoluteFrom<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n                <span class="token keyword">const</span> keys <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getCustomCacheInvalidationKeysAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                <span class="token keyword">return</span> <span class="token punctuation">{</span>\n                  <span class="token operator">...</span>defaultCacheKeys<span class="token punctuation">,</span>\n                  keys<span class="token punctuation">,</span>\n                <span class="token punctuation">}</span><span class="token punctuation">;</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h4 id="transformall"><code>transformAll</code><a href="#transformall" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>Type: <code>Function</code>\nDefault: <code>undefined</code></p>\n<p>Allows you to modify the contents of multiple files and save the result to one file.</p>\n<blockquote>\n<p>ℹ️ The <code>to</code> option must be specified and point to a file. It is allowed to use only <code>[contenthash]</code> and <code>[fullhash]</code> template strings.</p>\n</blockquote>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">"src/**/*.txt"</span><span class="token punctuation">,</span>\n          to<span class="token punctuation">:</span> <span class="token string">"dest/file.txt"</span><span class="token punctuation">,</span>\n          <span class="token comment">// The `assets` argument is an assets array for the pattern.from ("src/**/*.txt")</span>\n          <span class="token function">transformAll</span><span class="token punctuation">(</span>assets<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">const</span> result <span class="token operator">=</span> assets<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">,</span> asset<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n              <span class="token comment">// The asset content can be obtained from `asset.source` using `source` method.</span>\n              <span class="token comment">// The asset content is a [`Buffer`](https://nodejs.org/api/buffer.html) object, it could be converted to a `String` to be processed using `content.toString()`</span>\n              <span class="token keyword">const</span> content <span class="token operator">=</span> asset<span class="token punctuation">.</span>data<span class="token punctuation">;</span>\n\n              accumulator <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>accumulator<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>content<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\n`</span></span><span class="token punctuation">;</span>\n              <span class="token keyword">return</span> accumulator<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h3 id="noerroronmissing"><code>noErrorOnMissing</code><a href="#noerroronmissing" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>Type: <code>Boolean</code>\nDefault: <code>false</code></p>\n<p>Doesn\'t generate an error on missing file(s).</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"missing-file.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          noErrorOnMissing<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h4 id="info"><code>info</code><a href="#info" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>Type: <code>Object|Function&#x3C;Object></code>\nDefault: <code>undefined</code></p>\n<p>Allows to add assets info.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token string">"relative/path/to/file.ext"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">"**/*"</span><span class="token punctuation">,</span>\n          <span class="token comment">// Terser skip this file for minimization</span>\n          info<span class="token punctuation">:</span> <span class="token punctuation">{</span> minimized<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token string">"relative/path/to/file.ext"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">"**/*"</span><span class="token punctuation">,</span>\n          <span class="token comment">// Terser skip this file for minimization</span>\n          info<span class="token punctuation">:</span> <span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> minimized<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h3 id="options-1">Options<a href="#options-1" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<table>\n<thead>\n<tr>\n<th align="center">Name</th>\n<th align="center">Type</th>\n<th align="center">Default</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#concurrency"><code>concurrency</code></a><p class="description mobile"><code>{Number}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Number}</code></td>\n<td align="center"><code>100</code></td>\n<td align="left">Limits the number of simultaneous requests to fs</td>\n</tr>\n</tbody>\n</table>\n<h4 id="concurrency"><code>concurrency</code><a href="#concurrency" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>limits the number of simultaneous requests to fs</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>patterns<span class="token punctuation">]</span><span class="token punctuation">,</span>\n      options<span class="token punctuation">:</span> <span class="token punctuation">{</span> concurrency<span class="token punctuation">:</span> <span class="token number">50</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h3 id="examples">Examples<a href="#examples" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<h4 id="different-variants-from-glob-file-or-dir">Different variants <code>from</code> (<code>glob</code>, <code>file</code> or <code>dir</code>).<a href="#different-variants-from-glob-file-or-dir" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>Take for example the following file structure:</p>\n<pre><code>src/directory-nested/deep-nested/deepnested-file.txt\nsrc/directory-nested/nested-file.txt\n</code></pre>\n<h5 id="from-is-a-glob">From is a Glob<a href="#from-is-a-glob" aria-hidden="true"><span class="icon icon-link"></span></a></h5>\n<p>Everything that you specify in <code>from</code> will be included in the result:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">"src/directory-nested/**/*"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Result:</p>\n<pre><code class="hljs language-txt">src/directory-nested/deep-nested/deepnested-file.txt,\nsrc/directory-nested/nested-file.txt\n</code></pre>\n<p>If you want only content <code>src/directory-nested/</code>, you should only indicate <code>glob</code> in <code>from</code>. The path to the folder in which the search should take place, should be moved to <code>context</code>.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">"**/*"</span><span class="token punctuation">,</span>\n          context<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">,</span> <span class="token string">"directory-nested"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Result:</p>\n<pre><code class="hljs language-txt">deep-nested/deepnested-file.txt,\nnested-file.txt\n</code></pre>\n<h5 id="from-is-a-dir">From is a Dir<a href="#from-is-a-dir" aria-hidden="true"><span class="icon icon-link"></span></a></h5>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">,</span> <span class="token string">"directory-nested"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Result:</p>\n<pre><code class="hljs language-txt">deep-nested/deepnested-file.txt,\nnested-file.txt\n</code></pre>\n<p>Technically, this is <code>**/*</code> with a predefined context equal to the specified directory.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">"**/*"</span><span class="token punctuation">,</span>\n          context<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">,</span> <span class="token string">"directory-nested"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Result:</p>\n<pre><code class="hljs language-txt">deep-nested/deepnested-file.txt,\nnested-file.txt\n</code></pre>\n<h5 id="from-is-a-file">From is a File<a href="#from-is-a-file" aria-hidden="true"><span class="icon icon-link"></span></a></h5>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>\n            __dirname<span class="token punctuation">,</span>\n            <span class="token string">"src"</span><span class="token punctuation">,</span>\n            <span class="token string">"directory-nested"</span><span class="token punctuation">,</span>\n            <span class="token string">"nested-file.txt"</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Result:</p>\n<pre><code class="hljs language-txt">nested-file.txt\n</code></pre>\n<p>Technically, this is a filename with a predefined context equal to <code>path.dirname(pathToFile)</code>.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">"nested-file.txt"</span><span class="token punctuation">,</span>\n          context<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">,</span> <span class="token string">"directory-nested"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Result:</p>\n<pre><code class="hljs language-txt">nested-file.txt\n</code></pre>\n<h4 id="ignoring-files">Ignoring files<a href="#ignoring-files" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span>posix<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>\n            path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\\\\/g</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token string">"**/*"</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n          globOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            ignore<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n              <span class="token comment">// Ignore all `txt` files</span>\n              <span class="token string">"**/*.txt"</span><span class="token punctuation">,</span>\n              <span class="token comment">// Ignore all files in all subdirectories</span>\n              <span class="token string">"**/subdir/**"</span><span class="token punctuation">,</span>\n            <span class="token punctuation">]</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h4 id="flatten-copy">Flatten copy<a href="#flatten-copy" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>Removes all directory references and only copies file names.</p>\n<blockquote>\n<p>⚠️ If files have the same name, the result is non-deterministic.</p>\n</blockquote>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">"src/**/*"</span><span class="token punctuation">,</span>\n          to<span class="token punctuation">:</span> <span class="token string">"[name][ext]"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Result:</p>\n<pre><code class="hljs language-txt">file-1.txt\nfile-2.txt\nnested-file.txt\n</code></pre>\n<h4 id="copy-in-new-directory">Copy in new directory<a href="#copy-in-new-directory" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token comment">// When copying files starting with a dot, must specify the toType option</span>\n          <span class="token comment">// toType: "file",</span>\n          <span class="token function">to</span><span class="token punctuation">(</span><span class="token punctuation">{</span> context<span class="token punctuation">,</span> absoluteFilename <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`newdirectory/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token punctuation">.</span><span class="token function">relative</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> absoluteFilename<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">"directory"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Result:</p>\n<pre><code class="hljs language-txt">"newdirectory/file-1.txt",\n"newdirectory/nestedfile.txt",\n"newdirectory/nested/deep-nested/deepnested.txt",\n"newdirectory/nested/nestedfile.txt",\n</code></pre>\n<h4 id="skip-running-javascript-files-through-a-minimizer">Skip running JavaScript files through a minimizer<a href="#skip-running-javascript-files-through-a-minimizer" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>Useful if you need to simply copy <code>*.js</code> files to destination "as is" without evaluating and minimizing them using Terser.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token string">"relative/path/to/file.ext"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">"**/*"</span><span class="token punctuation">,</span>\n          <span class="token comment">// Terser skip this file for minimization</span>\n          info<span class="token punctuation">:</span> <span class="token punctuation">{</span> minimized<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h5 id="yarn-workspaces-and-monorepos"><code>yarn workspaces</code> and <code>monorepos</code><a href="#yarn-workspaces-and-monorepos" aria-hidden="true"><span class="icon icon-link"></span></a></h5>\n<p>When using <code>yarn workspaces</code> or<code>monorepos</code>, relative copy paths from node_modules can be broken due to the way packages are hoisting.\nTo avoid this, should explicitly specify where to copy the files from using <code>require.resolve</code>.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`${path.dirname(\n            require.resolve(`</span></span>$<span class="token punctuation">{</span>moduleName<span class="token punctuation">}</span><span class="token operator">/</span><span class="token keyword">package</span><span class="token punctuation">.</span>json<span class="token template-string"><span class="token string">`)\n          )}/target`</span></span><span class="token punctuation">,</span>\n          to<span class="token punctuation">:</span> <span class="token string">"target"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="contributing">Contributing<a href="#contributing" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>Please take a moment to read our contributing guidelines if you haven\'t yet done so.</p>\n<p><a href="https://github.com/webpack-contrib/copy-webpack-plugin/blob/master/.github/CONTRIBUTING.md">CONTRIBUTING</a></p>\n<h2 id="license">License<a href="#license" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><a href="https://github.com/webpack-contrib/copy-webpack-plugin/blob/master/LICENSE">MIT</a></p>\n'}}]);