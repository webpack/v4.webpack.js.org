(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{342:function(e,n,o){"use strict";o.r(n),n.default='<p>In this guide, we\'ll dive into some of the best practices and utilities for building a production site or application.</p>\n<blockquote class="tip">\n<p>This walkthrough stems from <a href="/guides/tree-shaking">Tree Shaking</a> and <a href="/guides/development">Development</a>. Please ensure you are familiar with the concepts/setup introduced in those guides before continuing on.</p>\n</blockquote>\n<h2 id="setup">Setup<a href="#setup" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>The goals of <em>development</em> and <em>production</em> builds differ greatly. In <em>development</em>, we want strong source mapping and a localhost server with live reloading or hot module replacement. In <em>production</em>, our goals shift to a focus on minified bundles, lighter weight source maps, and optimized assets to improve load time. With this logical separation at hand, we typically recommend writing <strong>separate webpack configurations</strong> for each environment.</p>\n<p>While we will separate the <em>production</em> and <em>development</em> specific bits out, note that we\'ll still maintain a "common" configuration to keep things DRY. In order to merge these configurations together, we\'ll use a utility called <a href="https://github.com/survivejs/webpack-merge"><code>webpack-merge</code></a>. With the "common" configuration in place, we won\'t have to duplicate code within the environment-specific configurations.</p>\n<p>Let\'s start by installing <code>webpack-merge</code> and splitting out the bits we\'ve already worked on in previous guides:</p>\n<pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev webpack-merge</code></pre>\n<p><strong>project</strong></p>\n<pre><code class="hljs language-diff">  webpack-demo\n  |- package.json\n<span class="token deleted">- |- webpack.config.js</span>\n<span class="token inserted">+ |- webpack.common.js</span>\n<span class="token inserted">+ |- webpack.dev.js</span>\n<span class="token inserted">+ |- webpack.prod.js</span>\n  |- /dist\n  |- /src\n    |- index.js\n    |- math.js\n  |- /node_modules</code></pre>\n<p><strong>webpack.common.js</strong></p>\n<pre><code class="hljs language-diff"><span class="token inserted">+ const path = require(\'path\');</span>\n<span class="token inserted">+ const { CleanWebpackPlugin } = require(\'clean-webpack-plugin\');</span>\n<span class="token inserted">+ const HtmlWebpackPlugin = require(\'html-webpack-plugin\');</span>\n<span class="token inserted">+</span>\n<span class="token inserted">+ module.exports = {</span>\n<span class="token inserted">+   entry: {</span>\n<span class="token inserted">+     app: \'./src/index.js\',</span>\n<span class="token inserted">+   },</span>\n<span class="token inserted">+   plugins: [</span>\n<span class="token inserted">+     // new CleanWebpackPlugin([\'dist/*\']) for &#x3C; v2 versions of CleanWebpackPlugin</span>\n<span class="token inserted">+     new CleanWebpackPlugin(),</span>\n<span class="token inserted">+     new HtmlWebpackPlugin({</span>\n<span class="token inserted">+       title: \'Production\',</span>\n<span class="token inserted">+     }),</span>\n<span class="token inserted">+   ],</span>\n<span class="token inserted">+   output: {</span>\n<span class="token inserted">+     filename: \'[name].bundle.js\',</span>\n<span class="token inserted">+     path: path.resolve(__dirname, \'dist\'),</span>\n<span class="token inserted">+   },</span>\n<span class="token inserted">+ };</span></code></pre>\n<p><strong>webpack.dev.js</strong></p>\n<pre><code class="hljs language-diff"><span class="token inserted">+ const merge = require(\'webpack-merge\');</span>\n<span class="token inserted">+ const common = require(\'./webpack.common.js\');</span>\n<span class="token inserted">+</span>\n<span class="token inserted">+ module.exports = merge(common, {</span>\n<span class="token inserted">+   mode: \'development\',</span>\n<span class="token inserted">+   devtool: \'inline-source-map\',</span>\n<span class="token inserted">+   devServer: {</span>\n<span class="token inserted">+     contentBase: \'./dist\',</span>\n<span class="token inserted">+   },</span>\n<span class="token inserted">+ });</span></code></pre>\n<p><strong>webpack.prod.js</strong></p>\n<pre><code class="hljs language-diff"><span class="token inserted">+ const merge = require(\'webpack-merge\');</span>\n<span class="token inserted">+ const common = require(\'./webpack.common.js\');</span>\n<span class="token inserted">+</span>\n<span class="token inserted">+ module.exports = merge(common, {</span>\n<span class="token inserted">+   mode: \'production\',</span>\n<span class="token inserted">+ });</span></code></pre>\n<p>In <code>webpack.common.js</code>, we now have setup our <code>entry</code> and <code>output</code> configuration and we\'ve included any plugins that are required for both environments. In <code>webpack.dev.js</code>, we\'ve set <code>mode</code> to <code>development</code>. Also, we\'ve added the recommended <code>devtool</code> for that environment (strong source mapping), as well as our simple <code>devServer</code> configuration. Finally, in <code>webpack.prod.js</code>,<code>mode</code> is set to <code>production</code> which loads <code>TerserPlugin</code> which was first introduced by the <a href="/guides/tree-shaking">tree shaking</a> guide.</p>\n<p>Note the use of <code>merge()</code> in the environment-specific configurations to easily include our common configuration in <code>dev</code> and <code>prod</code>. The <code>webpack-merge</code> tool offers a variety of advanced features for merging but for our use case we won\'t need any of that.</p>\n<h2 id="npm-scripts">NPM Scripts<a href="#npm-scripts" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>Now, let\'s modify our npm scripts to use the new configuration files. For the <code>start</code> script, which runs <code>webpack-dev-server</code>, we will use <code>webpack.dev.js</code>, and for the <code>build</code> script, which runs <code>webpack</code> to create a production build, we will use <code>webpack.prod.js</code>:</p>\n<p><strong>package.json</strong></p>\n<pre><code class="hljs language-diff">  {\n    "name": "development",\n    "version": "1.0.0",\n    "description": "",\n    "main": "src/index.js",\n    "scripts": {\n<span class="token deleted">-     "start": "webpack-dev-server --open",</span>\n<span class="token inserted">+     "start": "webpack-dev-server --open --config webpack.dev.js",</span>\n<span class="token deleted">-     "build": "webpack"</span>\n<span class="token inserted">+     "build": "webpack --config webpack.prod.js"</span>\n    },\n    "keywords": [],\n    "author": "",\n    "license": "ISC",\n    "devDependencies": {\n      "clean-webpack-plugin": "^0.1.17",\n      "css-loader": "^0.28.4",\n      "csv-loader": "^2.1.1",\n      "express": "^4.15.3",\n      "file-loader": "^0.11.2",\n      "html-webpack-plugin": "^2.29.0",\n      "style-loader": "^0.18.2",\n      "webpack": "^4.30.0",\n      "webpack-dev-middleware": "^1.12.0",\n      "webpack-dev-server": "^2.9.1",\n      "webpack-merge": "^4.1.0",\n      "xml-loader": "^1.2.1"\n    }\n  }</code></pre>\n<p>Feel free to run those scripts and see how the output changes as we continue adding to our <em>production</em> configuration.</p>\n<h2 id="specify-the-mode">Specify the Mode<a href="#specify-the-mode" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>Many libraries will key off the <code>process.env.NODE_ENV</code> variable to determine what should be included in the library. For example, when not in <em>production</em> some libraries may add additional logging and testing to make debugging easier. However, with <code>process.env.NODE_ENV === \'production\'</code> they might drop or add significant portions of code to optimize how things run for your actual users. Since webpack v4, specifying <a href="/configuration/mode/"><code>mode</code></a> automatically configures <a href="/plugins/define-plugin"><code>DefinePlugin</code></a> for you:</p>\n<p><strong>webpack.prod.js</strong></p>\n<pre><code class="hljs language-diff">  const merge = require(\'webpack-merge\');\n  const common = require(\'./webpack.common.js\');\n\n  module.exports = merge(common, {\n    mode: \'production\',\n  });</code></pre>\n<blockquote class="tip">\n<p>Technically, <code>NODE_ENV</code> is a system environment variable that Node.js exposes into running scripts. It is used by convention to determine dev-vs-prod behavior by server tools, build scripts, and client-side libraries. Contrary to expectations, <code>process.env.NODE_ENV</code> is not set to <code>"production"</code> <strong>within</strong> the build script <code>webpack.config.js</code>, see <a href="https://github.com/webpack/webpack/issues/2537">#2537</a>. Thus, conditionals like <code>process.env.NODE_ENV === \'production\' ? \'[name].[hash].bundle.js\' : \'[name].bundle.js\'</code> within webpack configurations do not work as expected.</p>\n</blockquote>\n<p>If you\'re using a library like <a href="https://reactjs.org/"><code>react</code></a>, you should actually see a significant drop in bundle size after adding this plugin. Also, note that any of our local <code>/src</code> code can key off of this as well, so the following check would be valid:</p>\n<p><strong>src/index.js</strong></p>\n<pre><code class="hljs language-diff">  import { cube } from \'./math.js\';\n<span class="token inserted">+</span>\n<span class="token inserted">+ if (process.env.NODE_ENV !== \'production\') {</span>\n<span class="token inserted">+   console.log(\'Looks like we are in development mode!\');</span>\n<span class="token inserted">+ }</span>\n\n  function component() {\n    const element = document.createElement(\'pre\');\n\n    element.innerHTML = [\n      \'Hello webpack!\',\n      \'5 cubed is equal to \' + cube(5)\n    ].join(\'\\n\\n\');\n\n    return element;\n  }\n\n  document.body.appendChild(component());</code></pre>\n<h2 id="minification">Minification<a href="#minification" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>webpack v4+ will minify your code by default in <a href="/configuration/mode/#mode-production"><code>production mode</code></a>.</p>\n<p>Note that while the <a href="/plugins/terser-webpack-plugin"><code>TerserPlugin</code></a> is a great place to start for minification and being used by default, there are other options out there. Here are a few more popular ones:</p>\n<ul>\n<li><a href="https://github.com/webpack-contrib/babel-minify-webpack-plugin"><code>BabelMinifyWebpackPlugin</code></a></li>\n<li><a href="https://github.com/webpack-contrib/closure-webpack-plugin"><code>ClosureWebpackPlugin</code></a></li>\n</ul>\n<p>If you decide to try another minification plugin, just make sure your new choice also drops dead code as described in the <a href="/guides/tree-shaking">tree shaking</a> guide and provide it as the <a href="/configuration/optimization/#optimizationminimizer"><code>optimization.minimizer</code></a>.</p>\n<h2 id="source-mapping">Source Mapping<a href="#source-mapping" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>We encourage you to have source maps enabled in production, as they are useful for debugging as well as running benchmark tests. That said, you should choose one with a fairly quick build speed that\'s recommended for production use (see <a href="/configuration/devtool"><code>devtool</code></a>). For this guide, we\'ll use the <code>source-map</code> option in the <em>production</em> as opposed to the <code>inline-source-map</code> we used in the <em>development</em>:</p>\n<p><strong>webpack.prod.js</strong></p>\n<pre><code class="hljs language-diff">  const merge = require(\'webpack-merge\');\n  const common = require(\'./webpack.common.js\');\n\n  module.exports = merge(common, {\n    mode: \'production\',\n<span class="token inserted">+   devtool: \'source-map\',</span>\n  });</code></pre>\n<blockquote class="tip">\n<p>Avoid <code>inline-***</code> and <code>eval-***</code> use in production as they can increase bundle size and reduce the overall performance.</p>\n</blockquote>\n<h2 id="minimize-css">Minimize CSS<a href="#minimize-css" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>It is crucial to minimize your CSS for production. Please see the <a href="/plugins/mini-css-extract-plugin/#minimizing-for-production">Minimizing for Production</a> section.</p>\n<h2 id="cli-alternatives">CLI Alternatives<a href="#cli-alternatives" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>Some of what has been described above can also be achieved by using the command line. For example, the <code>--optimize-minimize</code> flag will include the <code>TerserPlugin</code> behind the scenes. The <code>--define process.env.NODE_ENV="\'production\'"</code> will do the same for the <code>DefinePlugin</code> instance described above. And, <code>webpack -p</code> will automatically invoke both those flags and thus the plugins to be included.</p>\n<p>While these shorthand methods are nice, we usually recommend just using the configuration as it\'s better to understand exactly what is being done for you in both cases. The configuration also gives you more control on fine-tuning other options within both plugins.</p>\n'}}]);