(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{301:function(n,a,s){"use strict";s.r(a),a.default='<p>The <code>externals</code> configuration option provides a way of excluding dependencies from the output bundles. Instead, the created bundle relies on that dependency to be present in the consumer\'s environment. This feature is typically most useful to <strong>library developers</strong>, however there are a variety of applications for it.</p>\n<blockquote class="tip">\n<p><strong>consumer</strong> here is any end-user application.</p>\n</blockquote>\n<h2 id="externals"><code>externals</code><a href="#externals" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>string</code> <code>object</code> <code>function</code>  <code>regex</code></p>\n<p><strong>Prevent bundling</strong> of certain <code>import</code>ed packages and instead retrieve these <em>external dependencies</em> at runtime.</p>\n<p>For example, to include <a href="https://jquery.com/">jQuery</a> from a CDN instead of bundling it:</p>\n<p><strong>index.html</strong></p>\n<pre><code class="hljs language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>script</span>\n  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://code.jquery.com/jquery-3.1.0.js<span class="token punctuation">"</span></span>\n  <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sha256-slogkvB1K3VOkzAI8QITxV3VzpOnkeNVsKvtkYLMjfk=<span class="token punctuation">"</span></span>\n  <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">\n</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>script</span><span class="token punctuation">></span></span></code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  externals<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    jquery<span class="token punctuation">:</span> <span class="token string">\'jQuery\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>This leaves any dependent modules unchanged, i.e. the code shown below will still work:</p>\n<pre><code class="hljs language-javascript"><span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">\'jquery\'</span><span class="token punctuation">;</span>\n\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">\'.my-element\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>The bundle with external dependencies can be used in various module contexts, such as <a href="/concepts/modules">CommonJS, AMD, global and ES2015 modules</a>. The external library may be available in any of these forms:</p>\n<ul>\n<li><strong>root</strong>: The library should be available as a global variable (e.g. via a script tag).</li>\n<li><strong>commonjs</strong>: The library should be available as a CommonJS module.</li>\n<li><strong>commonjs2</strong>: Similar to the above but where the export is <code>module.exports.default</code>.</li>\n<li><strong>amd</strong>: Similar to <code>commonjs</code> but using AMD module system.</li>\n</ul>\n<p>The following syntaxes are accepted...</p>\n<h3 id="string">string<a href="#string" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>See the example above. The property name <code>jquery</code> indicates that the module <code>jquery</code> in <code>import $ from \'jquery\'</code> should be excluded. In order to replace this module, the value <code>jQuery</code> will be used to retrieve a global <code>jQuery</code> variable. In other words, when a string is provided it will be treated as <code>root</code> (defined above and below).</p>\n<h3 id="array">array<a href="#array" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  externals<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    subtract<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'./math\'</span><span class="token punctuation">,</span> <span class="token string">\'subtract\'</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p><code>subtract: [\'./math\', \'subtract\']</code> allows you select part of a commonjs module, where <code>./math</code> is the module and your bundle only requires the subset under the <code>subtract</code> variable. This example would translate to <code>require(\'./math\').subtract;</code></p>\n<h3 id="object">object<a href="#object" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<blockquote class="warning">\n<p>An object with <code>{ root, amd, commonjs, ... }</code> is only allowed for <a href="/configuration/output/#outputlibrarytarget"><code>libraryTarget: \'umd\'</code></a>. It\'s not allowed for other library targets.</p>\n</blockquote>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  externals <span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    react<span class="token punctuation">:</span> <span class="token string">\'react\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token comment">// or</span>\n\n  externals <span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    lodash <span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      commonjs<span class="token punctuation">:</span> <span class="token string">\'lodash\'</span><span class="token punctuation">,</span>\n      amd<span class="token punctuation">:</span> <span class="token string">\'lodash\'</span><span class="token punctuation">,</span>\n      root<span class="token punctuation">:</span> <span class="token string">\'_\'</span> <span class="token comment">// indicates global variable</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token comment">// or</span>\n\n  externals <span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    subtract <span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      root<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'math\'</span><span class="token punctuation">,</span> <span class="token string">\'subtract\'</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>This syntax is used to describe all the possible ways that an external library can be available. <code>lodash</code> here is available as <code>lodash</code> under AMD and CommonJS module systems but available as <code>_</code> in a global variable form. <code>subtract</code> here is available via the property <code>subtract</code> under the global <code>math</code> object (e.g. <code>window[\'math\'][\'subtract\']</code>).</p>\n<h3 id="function">function<a href="#function" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>It might be useful to define your own function to control the behavior of what you want to externalize from webpack. <a href="https://www.npmjs.com/package/webpack-node-externals">webpack-node-externals</a>, for example, excludes all modules from the <code>node_modules</code> directory and provides some options too, for example, whitelist packages.</p>\n<p>It basically comes down to this:</p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  externals<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">function</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> request<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/^yourregex$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">\'commonjs \'</span> <span class="token operator">+</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>The <code>\'commonjs \' + request</code> defines the type of module that needs to be externalized.</p>\n<h3 id="regex">regex<a href="#regex" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>Every dependency that matches the given regular expression will be excluded from the output bundles.</p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  externals<span class="token punctuation">:</span> <span class="token regex">/^(jquery|\\$)$/i</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>In this case, any dependency named <code>jQuery</code>, capitalized or not, or <code>$</code> would be externalized.</p>\n<h3 id="combining-syntaxes">Combining syntaxes<a href="#combining-syntaxes" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>Sometimes you may want to use a combination of the above syntaxes. This can be done in the following manner:</p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  externals<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      <span class="token comment">// String</span>\n      react<span class="token punctuation">:</span> <span class="token string">\'react\'</span><span class="token punctuation">,</span>\n      <span class="token comment">// Object</span>\n      lodash <span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        commonjs<span class="token punctuation">:</span> <span class="token string">\'lodash\'</span><span class="token punctuation">,</span>\n        amd<span class="token punctuation">:</span> <span class="token string">\'lodash\'</span><span class="token punctuation">,</span>\n        root<span class="token punctuation">:</span> <span class="token string">\'_\'</span> <span class="token comment">// indicates global variable</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token comment">// Array</span>\n      subtract<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'./math\'</span><span class="token punctuation">,</span> <span class="token string">\'subtract\'</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// Function</span>\n    <span class="token keyword">function</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> request<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/^yourregex$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">\'commonjs \'</span> <span class="token operator">+</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// Regex</span>\n    <span class="token operator">/</span><span class="token operator">^</span><span class="token punctuation">(</span>jquery<span class="token operator">|</span>\\$<span class="token punctuation">)</span>$<span class="token operator">/</span>i\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>For more information on how to use this configuration, please refer to the article on <a href="/guides/author-libraries">how to author a library</a>.</p>\n'}}]);