(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{313:function(n,e,o){"use strict";o.r(e),e.default='<p>webpack can compile for multiple environments or <em>targets</em>. To understand what a <code>target</code> is in detail, read through <a href="/concepts/targets/">the targets concept page</a>.</p>\n<h2 id="target"><code>target</code><a href="#target" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>string</code> <code>function (compiler)</code></p>\n<p>Instructs webpack to target a specific environment.</p>\n<h3 id="string"><code>string</code><a href="#string" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>The following string values are supported via <a href="https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsApply.js"><code>WebpackOptionsApply</code></a>:</p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><div class="title"><p>Option</p><p>Description</p></div>\n<div class="content"><p><code>async-node</code><p class="description mobile">Compile for usage in a Node.js-like environment (uses <code>fs</code> and <code>vm</code> to load chunks asynchronously)</p></p></div></td>\n<td class="description desktop">Compile for usage in a Node.js-like environment (uses \n<code>fs</code>\n and \n<code>vm</code>\n to load chunks asynchronously)</td>\n</tr>\n<tr>\n<td><div class="title"><p>Option</p><p>Description</p></div>\n<div class="content"><p><code>electron-main</code><p class="description mobile">Compile for <a href="https://electronjs.org/">Electron</a> for main process.</p></p></div></td>\n<td class="description desktop">Compile for \n<a href="https://electronjs.org/">Electron</a>\n for main process.</td>\n</tr>\n<tr>\n<td><div class="title"><p>Option</p><p>Description</p></div>\n<div class="content"><p><code>electron-renderer</code><p class="description mobile">Compile for <a href="https://electronjs.org/">Electron</a> for renderer process, providing a target using <code>JsonpTemplatePlugin</code>, <code>FunctionModulePlugin</code> for browser environments and <code>NodeTargetPlugin</code> and <code>ExternalsPlugin</code> for CommonJS and Electron built-in modules.</p></p></div></td>\n<td class="description desktop">Compile for \n<a href="https://electronjs.org/">Electron</a>\n for renderer process, providing a target using \n<code>JsonpTemplatePlugin</code>\n, \n<code>FunctionModulePlugin</code>\n for browser environments and \n<code>NodeTargetPlugin</code>\n and \n<code>ExternalsPlugin</code>\n for CommonJS and Electron built-in modules.</td>\n</tr>\n<tr>\n<td><div class="title"><p>Option</p><p>Description</p></div>\n<div class="content"><p><code>electron-preload</code><p class="description mobile">Compile for <a href="https://electronjs.org/">Electron</a> for renderer process, providing a target using <code>NodeTemplatePlugin</code> with <code>asyncChunkLoading</code> set to <code>true</code>, <code>FunctionModulePlugin</code> for browser environments and <code>NodeTargetPlugin</code> and <code>ExternalsPlugin</code> for CommonJS and Electron built-in modules.</p></p></div></td>\n<td class="description desktop">Compile for \n<a href="https://electronjs.org/">Electron</a>\n for renderer process, providing a target using \n<code>NodeTemplatePlugin</code>\n with \n<code>asyncChunkLoading</code>\n set to \n<code>true</code>\n, \n<code>FunctionModulePlugin</code>\n for browser environments and \n<code>NodeTargetPlugin</code>\n and \n<code>ExternalsPlugin</code>\n for CommonJS and Electron built-in modules.</td>\n</tr>\n<tr>\n<td><div class="title"><p>Option</p><p>Description</p></div>\n<div class="content"><p><code>node</code><p class="description mobile">Compile for usage in a Node.js-like environment (uses Node.js <code>require</code> to load chunks)</p></p></div></td>\n<td class="description desktop">Compile for usage in a Node.js-like environment (uses Node.js \n<code>require</code>\n to load chunks)</td>\n</tr>\n<tr>\n<td><div class="title"><p>Option</p><p>Description</p></div>\n<div class="content"><p><code>node-webkit</code><p class="description mobile">Compile for usage in WebKit and uses JSONP for chunk loading. Allows importing of built-in Node.js modules and <a href="http://docs.nwjs.io/en/latest/"><code>nw.gui</code></a> (experimental)</p></p></div></td>\n<td class="description desktop">Compile for usage in WebKit and uses JSONP for chunk loading. Allows importing of built-in Node.js modules and \n<a href="http://docs.nwjs.io/en/latest/"><code>nw.gui</code></a>\n (experimental)</td>\n</tr>\n<tr>\n<td><div class="title"><p>Option</p><p>Description</p></div>\n<div class="content"><p><code>web</code><p class="description mobile">Compile for usage in a browser-like environment <strong>(default)</strong></p></p></div></td>\n<td class="description desktop">Compile for usage in a browser-like environment \n<strong>(default)</strong></td>\n</tr>\n<tr>\n<td><div class="title"><p>Option</p><p>Description</p></div>\n<div class="content"><p><code>webworker</code><p class="description mobile">Compile as WebWorker</p></p></div></td>\n<td class="description desktop">Compile as WebWorker</td>\n</tr>\n</tbody>\n</table>\n<p>For example, when the <code>target</code> is set to <code>"electron-main"</code>, webpack includes multiple electron specific variables. For more information on which templates and externals are used, you can refer to webpack\'s <a href="https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsApply.js#L148-L183">source code</a>.</p>\n<h3 id="function"><code>function</code><a href="#function" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>If a function is passed, then it will be called with the compiler as a parameter. Set <code>target</code> to a <code>function</code> if none of the predefined targets from the list above meet your needs.</p>\n<p>For example, if you don\'t want any of the plugins applied:</p>\n<pre><code class="hljs language-js"><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>\n  target<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> undefined\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Or you can apply specific plugins you want:</p>\n<pre><code class="hljs language-js"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>\n  target<span class="token punctuation">:</span> <span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    compiler<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>\n      <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>JsonpTemplatePlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>LoaderTargetPlugin</span><span class="token punctuation">(</span><span class="token string">\'web\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n'}}]);