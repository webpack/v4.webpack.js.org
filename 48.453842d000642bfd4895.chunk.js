(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{309:function(n,s,a){"use strict";a.r(s),s.default='<p>These options allows you to control how webpack notifies you of assets and entry points that exceed a specific file limit.\nThis feature was inspired by the idea of <a href="https://github.com/webpack/webpack/issues/3216">webpack Performance Budgets</a>.</p>\n<h2 id="performance"><code>performance</code><a href="#performance" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>object</code></p>\n<p>Configure how performance hints are shown. For example if you have an asset that is over 250kb, webpack will emit a warning notifying you of this.</p>\n<h2 id="performancehints"><code>performance.hints</code><a href="#performancehints" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>string = \'warning\': \'error\' | \'warning\'</code> <code>boolean: false</code></p>\n<p>Turns hints on/off. In addition, tells webpack to throw either an error or a warning when hints are found.</p>\n<p>Given an asset is created that is over 250kb:</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  performance<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    hints<span class="token punctuation">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>No hint warnings or errors are shown.</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  performance<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    hints<span class="token punctuation">:</span> <span class="token string">\'warning\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>A warning will be displayed notifying you of a large asset. We recommend something like this for development environments.</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  performance<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    hints<span class="token punctuation">:</span> <span class="token string">\'error\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>An error will be displayed notifying you of a large asset. We recommend using <code>hints: "error"</code> during production builds to help prevent deploying production bundles that are too large, impacting webpage performance.</p>\n<h2 id="performancemaxentrypointsize"><code>performance.maxEntrypointSize</code><a href="#performancemaxentrypointsize" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>number = 250000</code></p>\n<p>An entry point represents all assets that would be utilized during initial load time for a specific entry. This option controls when webpack should emit performance hints based on the maximum entry point size in bytes.</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  performance<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    maxEntrypointSize<span class="token punctuation">:</span> <span class="token number">400000</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="performancemaxassetsize"><code>performance.maxAssetSize</code><a href="#performancemaxassetsize" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>number = 250000</code></p>\n<p>An asset is any emitted file from webpack. This option controls when webpack emits a performance hint based on individual asset size in bytes.</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  performance<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    maxAssetSize<span class="token punctuation">:</span> <span class="token number">100000</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="performanceassetfilter"><code>performance.assetFilter</code><a href="#performanceassetfilter" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>function(assetFilename) => boolean</code></p>\n<p>This property allows webpack to control what files are used to calculate performance hints. The default function is:</p>\n<pre><code class="hljs language-js"><span class="token keyword">function</span> <span class="token function">assetFilter</span><span class="token punctuation">(</span>assetFilename<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token regex">/\\.map$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>assetFilename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<p>You can override this property by passing your own function in:</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  performance<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    assetFilter<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>assetFilename<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> assetFilename<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">\'.js\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>The example above will only give you performance hints based on <code>.js</code> files.</p>\n'}}]);