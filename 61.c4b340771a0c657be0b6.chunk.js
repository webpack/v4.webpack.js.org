(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{322:function(n,s,a){"use strict";a.r(s),s.default='<p>A scaffold is an ECMAScript Module which exports a <code>yeoman generator</code> based on <a href="/guides/scaffolding/#api">Scaffolding API</a>. Scaffolds can be used but not limited to initialize a new webpack project, tailored to a specific use case. To view what we are building today, run <code>webpack init webpack-scaffold-demo</code>. This demo will show you how to build your own webpack scaffold. Let\'s start by creating a file named <code>generator.js</code>.</p>\n<h2 id="quick-start">Quick Start<a href="#quick-start" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><a href="https://github.com/rishabh3112/webpack-scaffold-starter"><code>webpack-scaffold-starter</code></a> can be used to setup a new scaffold project. To do so, follow the following commands.</p>\n<pre><code class="hljs language-bash"><span class="token function">mkdir</span> my-scaffold <span class="token operator">&#x26;&#x26;</span> <span class="token function">cd</span> my-scaffold\n<span class="token function">npm</span> <span class="token function">install</span> webpack-scaffold-starter\nnpx webpack-scaffold\n<span class="token function">git</span> init <span class="token comment"># optional</span></code></pre>\n<h2 id="setup">Setup<a href="#setup" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>Before writing a <code>webpack-cli</code> scaffold, think about what you\'re trying to achieve. Do you want a "general" scaffold that could be used by any project or type of app? Do you want something focused, like a scaffold that writes both your <code>webpack.config.js</code> and your framework code? It\'s also useful to think about the user experience for your scaffold.</p>\n<p><code>webpack-cli</code> offers interactive experience to customize the output accordingly. For example asking questions like: "What is your entry point?".</p>\n<p>Let\'s create our skeleton. In order for the webpack CLI to detect our options, we have to define some properties in the constructor.</p>\n<p><strong>generator.js</strong></p>\n<pre><code class="hljs language-js"><span class="token keyword">const</span> Generator <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'yeoman-generator\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">WebpackGenerator</span> <span class="token keyword">extends</span> <span class="token class-name">Generator</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> opts<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    opts<span class="token punctuation">.</span>env<span class="token punctuation">.</span>configuration <span class="token operator">=</span> <span class="token punctuation">{</span>\n      dev<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p><code>configuration</code> object has to have one property you name (we named it <code>dev</code> in the snippet above). A good practice is to name the underlying property with the name you want to give to your <code>webpack.config.js</code> file for a better indication of what configuration each file has.</p>\n<h2 id="make-it-interactive">Make it interactive<a href="#make-it-interactive" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>In order for us to interact with the users, we make use of the <a href="http://yeoman.io/authoring/user-interactions.html"><code>prompting</code></a> method yeoman has. In this method, we can get various answers from the user, like asking for entry points or plugins. You can either manually create each object representing a question or you can make good use of our utilities from <a href="https://github.com/webpack/webpack-cli/tree/master/packages/webpack-scaffold"><code>webpack-scaffold</code></a>. We are in a good mood today, so let\'s build a configuration only if the user chooses <code>Pengwings</code>.</p>\n<pre><code class="hljs language-js"><span class="token keyword">const</span> Generator <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'yeoman-generator\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> List <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@webpack-cli/webpack-scaffold\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>List<span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">WebpackGenerator</span> <span class="token keyword">extends</span> <span class="token class-name">Generator</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> opts<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    opts<span class="token punctuation">.</span>env<span class="token punctuation">.</span>configuration <span class="token operator">=</span> <span class="token punctuation">{</span>\n      dev<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">prompting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n      <span class="token function">List</span><span class="token punctuation">(</span><span class="token string">\'confirm\'</span><span class="token punctuation">,</span> <span class="token string">\'Welcome to the demo scaffold! Are you ready?\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'Yes\'</span><span class="token punctuation">,</span> <span class="token string">\'No\'</span><span class="token punctuation">,</span> <span class="token string">\'Pengwings\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>answer <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>answer<span class="token punctuation">[</span><span class="token string">\'confirm\'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">\'Pengwings\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// build the configuration</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="configuring-webpack">Configuring Webpack<a href="#configuring-webpack" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>So far, we\'ve made an interaction with the user. If you were coding along, great! So how do we proceed from here? Let\'s try to build a simple webpack configuration that has an <a href="/configuration/entry-context/#entry">entry point</a>, an <a href="/concepts/#output">output</a>, and a <a href="/configuration/entry-context/#context">context property</a>. For this, we need to create a <code>webpackOptions</code> property on our <code>dev</code> object. This is where <code>entry</code>, <code>output</code> and <code>context</code> is going to be hooked up, later resulting in a <code>webpack.config.js</code>.</p>\n<blockquote class="tip">\n<p>Define the <code>webpackOptions</code> property in the constructor to keep your scaffold as clean as possible!</p>\n</blockquote>\n<pre><code class="hljs language-js"><span class="token keyword">const</span> Generator <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'yeoman-generator\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> List <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@webpack-cli/webpack-scaffold\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>List<span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">WebpackGenerator</span> <span class="token keyword">extends</span> <span class="token class-name">Generator</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> opts<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    opts<span class="token punctuation">.</span>env<span class="token punctuation">.</span>configuration <span class="token operator">=</span> <span class="token punctuation">{</span>\n      dev<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        webpackOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">prompting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n      <span class="token function">List</span><span class="token punctuation">(</span><span class="token string">\'confirm\'</span><span class="token punctuation">,</span> <span class="token string">\'Welcome to the demo scaffold! Are you ready?\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'Yes\'</span><span class="token punctuation">,</span> <span class="token string">\'No\'</span><span class="token punctuation">,</span> <span class="token string">\'Pengwings\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>answer <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>answer<span class="token punctuation">[</span><span class="token string">\'confirm\'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">\'Pengwings\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// build the configuration</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="dev-configurations">Dev Configurations<a href="#dev-configurations" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>Congratulations! You\'ve now created the base of a <code>webpack-scaffold</code>! Let\'s now add some more stuff to our future configuration file!\nWe are going to follow good convention, and extract our configuration into another file, named <code>dev-config.js</code>. As this is just regular JavaScript, we can make the module a function, and supply our <code>entry</code> as a parameter for us to build up a configuration file from.</p>\n<p><strong>dev-config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">createDevConfig</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> devConfig <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p><strong>generator.js</strong></p>\n<pre><code class="hljs language-js"><span class="token keyword">const</span> Generator <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'yeoman-generator\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> List <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@webpack-cli/webpack-scaffold\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>List<span class="token punctuation">;</span>\n<span class="token keyword">const</span> createDevConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./dev-config\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">WebpackGenerator</span> <span class="token keyword">extends</span> <span class="token class-name">Generator</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> opts<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    opts<span class="token punctuation">.</span>env<span class="token punctuation">.</span>configuration <span class="token operator">=</span> <span class="token punctuation">{</span>\n      dev<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        webpackOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">prompting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n      <span class="token function">List</span><span class="token punctuation">(</span><span class="token string">\'confirm\'</span><span class="token punctuation">,</span> <span class="token string">\'Welcome to the demo scaffold! Are you ready?\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'Yes\'</span><span class="token punctuation">,</span> <span class="token string">\'No\'</span><span class="token punctuation">,</span> <span class="token string">\'Pengwings\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>answer <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>answer<span class="token punctuation">[</span><span class="token string">\'confirm\'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">\'Pengwings\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>env<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>webpackOptions <span class="token operator">=</span> <span class="token function">createDevConfig</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>We\'ve now abstracted that part of the code that\'s probably going to be really big. Let\'s go ahead and add another question, like asking for an entry point.</p>\n<pre><code class="hljs language-js"><span class="token keyword">const</span> Generator <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'yeoman-generator\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> List <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@webpack-cli/webpack-scaffold\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>List<span class="token punctuation">;</span>\n<span class="token keyword">const</span> Input <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@webpack-cli/webpack-scaffold\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Input<span class="token punctuation">;</span>\n<span class="token keyword">const</span> createDevConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./dev-config\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">WebpackGenerator</span> <span class="token keyword">extends</span> <span class="token class-name">Generator</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> opts<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    opts<span class="token punctuation">.</span>env<span class="token punctuation">.</span>configuration <span class="token operator">=</span> <span class="token punctuation">{</span>\n      dev<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        webpackOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">prompting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n      <span class="token function">List</span><span class="token punctuation">(</span><span class="token string">\'confirm\'</span><span class="token punctuation">,</span> <span class="token string">\'Welcome to the demo scaffold! Are you ready?\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'Yes\'</span><span class="token punctuation">,</span> <span class="token string">\'No\'</span><span class="token punctuation">,</span> <span class="token string">\'Pengwings\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token function">Input</span><span class="token punctuation">(</span><span class="token string">\'entry\'</span><span class="token punctuation">,</span> <span class="token string">\'What is the entry point in your app?\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>answer <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>answer<span class="token punctuation">[</span><span class="token string">\'confirm\'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">\'Pengwings\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>env<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>webpackOptions <span class="token operator">=</span> <span class="token function">createDevConfig</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="some-more-configs">Some more configs<a href="#some-more-configs" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>Let\'s look at <code>dev-config.js</code>. We have access to user\'s answers, use them to assign values to desired config properties, in this case - <code>entry</code>. We\'ve also added an output property that has a <code>filename</code>.</p>\n<blockquote class="tip">\n<p>String values must be quoted twice. This is to preserve our ability to add other functionality, using only " ", while " \'Mystring\' " resolves to a string.</p>\n</blockquote>\n<p><strong>dev-config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">createDevConfig</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> entryProp <span class="token operator">=</span> answer<span class="token punctuation">.</span>entry <span class="token operator">?</span> <span class="token punctuation">(</span> <span class="token string">\'\\\'\'</span> <span class="token operator">+</span> answer<span class="token punctuation">.</span>entry <span class="token operator">+</span> <span class="token string">\'\\\'\'</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">\'\\\'index.js\\\'\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> devConfig <span class="token operator">=</span> <span class="token punctuation">{</span>\n    entry<span class="token punctuation">:</span> entryProp<span class="token punctuation">,</span>\n    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      filename<span class="token punctuation">:</span> <span class="token string">\'\\\'[name].js\\\'\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> devConfig<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Run <code>webpack init webpack-scaffold-demo</code>, and you should see scaffold working.</p>\n<h2 id="basic-scaffold">Basic Scaffold<a href="#basic-scaffold" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>Now that we\'ve got our initial scaffold. Let\'s add the rest of our options! For the <code>context</code>, let\'s say we need to use <code>path</code>\'s <code>join</code> function. For this, we use a single quote string. By default, the current directory is used, but it\'s recommended to pass a value in your configuration (context). This makes your configuration independent from CWD (current working directory).</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">createDevConfig</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> entryProp <span class="token operator">=</span> answer<span class="token punctuation">.</span>entry <span class="token operator">?</span> <span class="token punctuation">(</span> <span class="token string">\'\\\'\'</span> <span class="token operator">+</span> answer<span class="token punctuation">.</span>entry <span class="token operator">+</span> <span class="token string">\'\\\'\'</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">\'\\\'index.js\\\'\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> devConfig <span class="token operator">=</span> <span class="token punctuation">{</span>\n    entry<span class="token punctuation">:</span> entryProp<span class="token punctuation">,</span>\n    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      filename<span class="token punctuation">:</span> <span class="token string">\'\\\'[name].js\\\'\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    context<span class="token punctuation">:</span> <span class="token string">\'path.join(__dirname, "src")\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> devConfig<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="add-more-functionality">Add more functionality<a href="#add-more-functionality" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>Now we are ready to add a plugin. For this, let\'s create an utility for <a href="/plugins/html-webpack-plugin/"><code>html-webpack-plugin</code></a> based on the input from the user. Start by adding another question to our prompt.</p>\n<pre><code class="hljs language-js"><span class="token keyword">const</span> Generator <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'yeoman-generator\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> List <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@webpack-cli/webpack-scaffold\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>List<span class="token punctuation">;</span>\n<span class="token keyword">const</span> Input <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@webpack-cli/webpack-scaffold\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Input<span class="token punctuation">;</span>\n<span class="token keyword">const</span> createDevConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./dev-config\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">WebpackGenerator</span> <span class="token keyword">extends</span> <span class="token class-name">Generator</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> opts<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    opts<span class="token punctuation">.</span>env<span class="token punctuation">.</span>configuration <span class="token operator">=</span> <span class="token punctuation">{</span>\n      dev<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        webpackOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">prompting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n      <span class="token function">List</span><span class="token punctuation">(</span><span class="token string">\'confirm\'</span><span class="token punctuation">,</span> <span class="token string">\'Welcome to the demo scaffold! Are you ready?\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'Yes\'</span><span class="token punctuation">,</span> <span class="token string">\'No\'</span><span class="token punctuation">,</span> <span class="token string">\'Pengwings\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token function">Input</span><span class="token punctuation">(</span><span class="token string">\'entry\'</span><span class="token punctuation">,</span> <span class="token string">\'What is the entry point in your app?\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token function">Input</span><span class="token punctuation">(</span><span class="token string">\'plugin\'</span><span class="token punctuation">,</span> <span class="token string">\'What do you want to name your html file?\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>answer <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>answer<span class="token punctuation">[</span><span class="token string">\'confirm\'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">\'Pengwings\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>env<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>webpackOptions <span class="token operator">=</span> <span class="token function">createDevConfig</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="create-string-with-name">Create string with name<a href="#create-string-with-name" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>Now, we\'ve got to create a string with our answer. This is how it looks.</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">createHtmlPlugin</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token template-string"><span class="token string">` new HtmlWebpackPlugin({filename: "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.html" }) `</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>We\'ve now created a scaffold with <code>entry</code>, <code>output</code>, <code>context</code> and a <code>plugin</code>. If you\'re curious on the API, check the <a href="/guides/scaffolding/">API</a> for more info on how to scaffold with <code>regexps</code>, <code>module</code> and other!</p>\n<h2 id="defining-scopes">Defining scopes<a href="#defining-scopes" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>In order for webpack to compile, we\'ve got to import <code>path</code>. For this, we\'ve got to define something called <code>topScope</code>. This is where our code before <code>module.exports</code> is going to, where you can add everything from imports and variables to functions. The syntax is the same as with the plugins, except for that the <code>topScope</code> property must be an array. In <code>topScope</code> you can define and import what\'s needed for your specific use case.</p>\n<p><strong>generator.js</strong></p>\n<pre><code class="hljs language-js"><span class="token keyword">const</span> Generator <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'yeoman-generator\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> List <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@webpack-cli/webpack-scaffold\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>List<span class="token punctuation">;</span>\n<span class="token keyword">const</span> Input <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@webpack-cli/webpack-scaffold\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Input<span class="token punctuation">;</span>\n<span class="token keyword">const</span> createDevConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./dev-config\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">WebpackGenerator</span> <span class="token keyword">extends</span> <span class="token class-name">Generator</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> opts<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    opts<span class="token punctuation">.</span>env<span class="token punctuation">.</span>configuration <span class="token operator">=</span> <span class="token punctuation">{</span>\n      dev<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        webpackOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">prompting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n      <span class="token function">List</span><span class="token punctuation">(</span><span class="token string">\'confirm\'</span><span class="token punctuation">,</span> <span class="token string">\'Welcome to the demo scaffold! Are you ready?\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'Yes\'</span><span class="token punctuation">,</span> <span class="token string">\'No\'</span><span class="token punctuation">,</span> <span class="token string">\'Pengwings\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token function">Input</span><span class="token punctuation">(</span><span class="token string">\'entry\'</span><span class="token punctuation">,</span> <span class="token string">\'What is the entry point in your app?\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token function">Input</span><span class="token punctuation">(</span><span class="token string">\'plugin\'</span><span class="token punctuation">,</span> <span class="token string">\'What do you want to name your html file?\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>answer <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>answer<span class="token punctuation">[</span><span class="token string">\'confirm\'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">\'Pengwings\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>env<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>webpackOptions <span class="token operator">=</span> <span class="token function">createDevConfig</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>env<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>topScope <span class="token operator">=</span> <span class="token punctuation">[</span>\n          <span class="token string">\'const path = require("path")\'</span><span class="token punctuation">,</span>\n          <span class="token string">\'const webpack = require("webpack")\'</span>\n        <span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="configuration-nomenclature">Configuration nomenclature<a href="#configuration-nomenclature" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>We recommend you to name your configuration file something meaningful, like in our case: "penguins". To do it, set the <code>this.options.env.configuration.dev.configName</code> to desired string.</p>\n<pre><code class="hljs language-js"><span class="token keyword">const</span> Generator <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'yeoman-generator\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> List <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@webpack-cli/webpack-scaffold\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>List<span class="token punctuation">;</span>\n<span class="token keyword">const</span> Input <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@webpack-cli/webpack-scaffold\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Input<span class="token punctuation">;</span>\n<span class="token keyword">const</span> createDevConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./dev-config\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">WebpackGenerator</span> <span class="token keyword">extends</span> <span class="token class-name">Generator</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> opts<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    opts<span class="token punctuation">.</span>env<span class="token punctuation">.</span>configuration <span class="token operator">=</span> <span class="token punctuation">{</span>\n      dev<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        webpackOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">prompting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n      <span class="token function">List</span><span class="token punctuation">(</span><span class="token string">\'confirm\'</span><span class="token punctuation">,</span> <span class="token string">\'Welcome to the demo scaffold! Are you ready?\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'Yes\'</span><span class="token punctuation">,</span> <span class="token string">\'No\'</span><span class="token punctuation">,</span> <span class="token string">\'Pengwings\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token function">Input</span><span class="token punctuation">(</span><span class="token string">\'entry\'</span><span class="token punctuation">,</span> <span class="token string">\'What is the entry point in your app?\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token function">Input</span><span class="token punctuation">(</span><span class="token string">\'plugin\'</span><span class="token punctuation">,</span> <span class="token string">\'What do you want to name your html file?\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>answer <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span><span class="token punctuation">(</span>answer<span class="token punctuation">[</span><span class="token string">\'confirm\'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">\'Pengwings\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>env<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>webpackOptions <span class="token operator">=</span> <span class="token function">createDevConfig</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>env<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>topScope <span class="token operator">=</span> <span class="token punctuation">[</span>\n          <span class="token string">\'const path = require("path")\'</span><span class="token punctuation">,</span>\n          <span class="token string">\'const webpack = require("webpack")\'</span>\n        <span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>env<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>configName <span class="token operator">=</span> <span class="token string">\'pengwings\'</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="about-yo-rcjson">About .yo-rc.json<a href="#about-yo-rcjson" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>To write the actual configuration, <a href="/api/cli/">webpack CLI</a> creates a <code>.yo-rc.json</code> file for it to parse the AST. In order for the CLI to understand how to parse the configuration, we need to write to the <code>.yo-rc.json</code>. This is done using the <code>writing</code> lifecycle method built-in by yeoman.</p>\n<pre><code class="hljs language-js"><span class="token keyword">const</span> Generator <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'yeoman-generator\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> List <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@webpack-cli/webpack-scaffold\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>List<span class="token punctuation">;</span>\n<span class="token keyword">const</span> Input <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@webpack-cli/webpack-scaffold\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Input<span class="token punctuation">;</span>\n<span class="token keyword">const</span> createDevConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./dev-config\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">WebpackGenerator</span> <span class="token keyword">extends</span> <span class="token class-name">Generator</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> opts<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    opts<span class="token punctuation">.</span>env<span class="token punctuation">.</span>configuration <span class="token operator">=</span> <span class="token punctuation">{</span>\n      dev<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        webpackOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">prompting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n      <span class="token function">List</span><span class="token punctuation">(</span><span class="token string">\'confirm\'</span><span class="token punctuation">,</span> <span class="token string">\'Welcome to the demo scaffold! Are you ready?\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'Yes\'</span><span class="token punctuation">,</span> <span class="token string">\'No\'</span><span class="token punctuation">,</span> <span class="token string">\'Pengwings\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token function">Input</span><span class="token punctuation">(</span><span class="token string">\'entry\'</span><span class="token punctuation">,</span> <span class="token string">\'What is the entry point in your app?\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token function">Input</span><span class="token punctuation">(</span><span class="token string">\'plugin\'</span><span class="token punctuation">,</span> <span class="token string">\'What do you want to name your html file?\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span> <span class="token punctuation">(</span>answer <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span><span class="token punctuation">(</span>answer<span class="token punctuation">[</span><span class="token string">\'confirm\'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">\'Pengwings\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>env<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>webpackOptions <span class="token operator">=</span> <span class="token function">createDevConfig</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>env<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>topScope <span class="token operator">=</span> <span class="token punctuation">[</span>\n          <span class="token string">\'const path = require("path")\'</span><span class="token punctuation">,</span>\n          <span class="token string">\'const webpack = require("webpack")\'</span>\n        <span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>env<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>configName <span class="token operator">=</span> <span class="token string">\'pengwings\'</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">writing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">\'configuration\'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>env<span class="token punctuation">.</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Congratulations 🎉 on completing your first scaffold! If you need help, submit an <a href="https://github.com/evenstensberg/webpack-scaffold-demo/issues">issue</a>, or reach out on <a href="https://twitter.com/evenstensberg">Twitter</a>!</p>\n'}}]);