(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{327:function(n,e,s){"use strict";s.r(e),e.default='<blockquote class="tip">\n<p>The examples in this guide stem from <a href="/guides/getting-started">getting started</a>, <a href="/guides/output-management">output management</a> and <a href="/guides/code-splitting">code splitting</a>.</p>\n</blockquote>\n<p>So we\'re using webpack to bundle our modular application which yields a deployable <code>/dist</code> directory. Once the contents of <code>/dist</code> have been deployed to a server, clients (typically browsers) will hit that server to grab the site and its assets. The last step can be time consuming, which is why browsers use a technique called <a href="https://searchstorage.techtarget.com/definition/cache">caching</a>. This allows sites to load faster with less unnecessary network traffic. However, it can also cause headaches when you need new code to be picked up.</p>\n<p>This guide focuses on the configuration needed to ensure files produced by webpack compilation can remain cached unless their content has changed.</p>\n<h2 id="output-filenames">Output Filenames<a href="#output-filenames" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>We can use the <code>output.filename</code> <a href="/configuration/output/#outputfilename">substitutions</a> setting to define the names of our output files. webpack provides a method of templating the filenames using bracketed strings called <strong>substitutions</strong>. The <code>[contenthash]</code> substitution will add a unique hash based on the content of an asset. When the asset\'s content changes, <code>[contenthash]</code> will change as well.</p>\n<p>Let\'s get our project set up using the example from <a href="/guides/getting-started">getting started</a> with the <code>plugins</code> from <a href="/guides/output-management">output management</a>, so we don\'t have to deal with maintaining our <code>index.html</code> file manually:</p>\n<p><strong>project</strong></p>\n<pre><code class="hljs language-diff">webpack-demo\n|- package.json\n|- webpack.config.js\n|- /dist\n|- /src\n  |- index.js\n|- /node_modules</code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-diff">  const path = require(\'path\');\n  const { CleanWebpackPlugin } = require(\'clean-webpack-plugin\');\n  const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n\n  module.exports = {\n    entry: \'./src/index.js\',\n    plugins: [\n      // new CleanWebpackPlugin([\'dist/*\']) for &#x3C; v2 versions of CleanWebpackPlugin\n      new CleanWebpackPlugin(),\n      new HtmlWebpackPlugin({\n<span class="token deleted">-       title: \'Output Management\',</span>\n<span class="token inserted">+       title: \'Caching\',</span>\n      }),\n    ],\n    output: {\n<span class="token deleted">-     filename: \'bundle.js\',</span>\n<span class="token inserted">+     filename: \'[name].[contenthash].js\',</span>\n      path: path.resolve(__dirname, \'dist\'),\n    },\n  };</code></pre>\n<p>Running our build script, <code>npm run build</code>, with this configuration should produce the following output:</p>\n<pre><code class="hljs language-bash"><span class="token punctuation">..</span>.\n                       Asset       Size  Chunks                    Chunk Names\nmain.7e2c49a622975ebd9b7e.js     544 kB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  main\n                  index.html  197 bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n<span class="token punctuation">..</span>.</code></pre>\n<p>As you can see the bundle\'s name now reflects its content (via the hash). If we run another build without making any changes, we\'d expect that filename to stay the same. However, if we were to run it again, we may find that this is not the case:</p>\n<pre><code class="hljs language-bash"><span class="token punctuation">..</span>.\n                       Asset       Size  Chunks                    Chunk Names\nmain.205199ab45963f6a62ec.js     544 kB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  main\n                  index.html  197 bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n<span class="token punctuation">..</span>.</code></pre>\n<p>This is because webpack includes certain boilerplate, specifically the runtime and manifest, in the entry chunk.</p>\n<blockquote class="warning">\n<p>Output may differ depending on your current webpack version. Newer versions may not have all the same issues with hashing as some older versions, but we still recommend the following steps to be safe.</p>\n</blockquote>\n<h2 id="extracting-boilerplate">Extracting Boilerplate<a href="#extracting-boilerplate" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>As we learned in <a href="/guides/code-splitting">code splitting</a>, the <a href="/plugins/split-chunks-plugin/"><code>SplitChunksPlugin</code></a> can be used to split modules out into separate bundles. webpack provides an optimization feature to split runtime code into a separate chunk using the <a href="/configuration/optimization/#optimizationruntimechunk"><code>optimization.runtimeChunk</code></a> option. Set it to <code>single</code> to create a single runtime bundle for all chunks:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-diff">  const path = require(\'path\');\n  const { CleanWebpackPlugin } = require(\'clean-webpack-plugin\');\n  const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n\n  module.exports = {\n    entry: \'./src/index.js\',\n    plugins: [\n      // new CleanWebpackPlugin([\'dist/*\']) for &#x3C; v2 versions of CleanWebpackPlugin\n      new CleanWebpackPlugin(),\n      new HtmlWebpackPlugin({\n        title: \'Caching\',\n      }),\n    ],\n    output: {\n      filename: \'[name].[contenthash].js\',\n      path: path.resolve(__dirname, \'dist\'),\n    },\n<span class="token inserted">+   optimization: {</span>\n<span class="token inserted">+     runtimeChunk: \'single\',</span>\n<span class="token inserted">+   },</span>\n  };</code></pre>\n<p>Let\'s run another build to see the extracted <code>runtime</code> bundle:</p>\n<pre><code class="hljs language-bash">Hash: 82c9c385607b2150fab2\nVersion: webpack 4.12.0\nTime: 3027ms\n                          Asset       Size  Chunks             Chunk Names\nruntime.cc17ae2a94ec771e9221.js   1.42 KiB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  runtime\n   main.e81de2cf758ada72f306.js   69.5 KiB       1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  main\n                     index.html  275 bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n<span class="token punctuation">[</span>1<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js 497 bytes <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n<span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js 489 bytes <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n<span class="token punctuation">[</span>3<span class="token punctuation">]</span> ./src/index.js 309 bytes <span class="token punctuation">{</span>1<span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    + 1 hidden module</code></pre>\n<p>It\'s also good practice to extract third-party libraries, such as <code>lodash</code> or <code>react</code>, to a separate <code>vendor</code> chunk as they are less likely to change than our local source code. This step will allow clients to request even less from the server to stay up to date.\nThis can be done by using the <a href="/plugins/split-chunks-plugin/#splitchunkscachegroups"><code>cacheGroups</code></a> option of the <a href="/plugins/split-chunks-plugin/"><code>SplitChunksPlugin</code></a> demonstrated in <a href="/plugins/split-chunks-plugin/#split-chunks-example-2">Example 2 of SplitChunksPlugin</a>. Lets add <code>optimization.splitChunks</code> with <code>cacheGroups</code> with next params and build:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-diff">  const path = require(\'path\');\n  const { CleanWebpackPlugin } = require(\'clean-webpack-plugin\');\n  const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n\n  module.exports = {\n    entry: \'./src/index.js\',\n    plugins: [\n      // new CleanWebpackPlugin([\'dist/*\']) for &#x3C; v2 versions of CleanWebpackPlugin\n      new CleanWebpackPlugin(),\n      new HtmlWebpackPlugin({\n        title: \'Caching\',\n      }),\n    ],\n    output: {\n      filename: \'[name].[contenthash].js\',\n      path: path.resolve(__dirname, \'dist\'),\n    },\n    optimization: {\n      runtimeChunk: \'single\',\n<span class="token inserted">+     splitChunks: {</span>\n<span class="token inserted">+       cacheGroups: {</span>\n<span class="token inserted">+         vendor: {</span>\n<span class="token inserted">+           test: /[\\\\/]node_modules[\\\\/]/,</span>\n<span class="token inserted">+           name: \'vendors\',</span>\n<span class="token inserted">+           chunks: \'all\',</span>\n<span class="token inserted">+         },</span>\n<span class="token inserted">+       },</span>\n<span class="token inserted">+     },</span>\n    },\n  };</code></pre>\n<p>Let\'s run another build to see our new <code>vendor</code> bundle:</p>\n<pre><code class="hljs language-bash"><span class="token punctuation">..</span>.\n                          Asset       Size  Chunks             Chunk Names\nruntime.cc17ae2a94ec771e9221.js   1.42 KiB       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  runtime\nvendors.a42c3ca0d742766d7a28.js   69.4 KiB       1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  vendors\n   main.abf44fedb7d11d4312d7.js  240 bytes       2  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  main\n                     index.html  353 bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n<span class="token punctuation">..</span>.</code></pre>\n<p>We can now see that our <code>main</code> bundle does not contain <code>vendor</code> code from <code>node_modules</code> directory and is down in size to <code>240 bytes</code>!</p>\n<h2 id="module-identifiers">Module Identifiers<a href="#module-identifiers" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>Let\'s add another module, <code>print.js</code>, to our project:</p>\n<p><strong>project</strong></p>\n<pre><code class="hljs language-diff">webpack-demo\n|- package.json\n|- webpack.config.js\n|- /dist\n|- /src\n  |- index.js\n<span class="token inserted">+ |- print.js</span>\n|- /node_modules</code></pre>\n<p><strong>print.js</strong></p>\n<pre><code class="hljs language-diff"><span class="token inserted">+ export default function print(text) {</span>\n<span class="token inserted">+   console.log(text);</span>\n<span class="token inserted">+ };</span></code></pre>\n<p><strong>src/index.js</strong></p>\n<pre><code class="hljs language-diff">  import _ from \'lodash\';\n<span class="token inserted">+ import Print from \'./print\';</span>\n\n  function component() {\n    const element = document.createElement(\'div\');\n\n    // Lodash, now imported by this script\n    element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n<span class="token inserted">+   element.onclick = Print.bind(null, \'Hello webpack!\');</span>\n\n    return element;\n  }\n\n  document.body.appendChild(component());</code></pre>\n<p>Running another build, we would expect only our <code>main</code> bundle\'s hash to change, however...</p>\n<pre><code class="hljs language-bash"><span class="token punctuation">..</span>.\n                           Asset       Size  Chunks                    Chunk Names\n  runtime.1400d5af64fc1b7b3a45.js    5.85 kB      0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         runtime\n  vendor.a7561fb0e9a071baadb9.js     541 kB       1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  vendor\n    main.b746e3eb72875af2caa9.js    1.22 kB       2  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         main\n                      index.html  352 bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n<span class="token punctuation">..</span>.</code></pre>\n<p>... we can see that all three have. This is because each <a href="/api/module-variables/#moduleid-commonjs"><code>module.id</code></a> is incremented based on resolving order by default. Meaning when the order of resolving is changed, the IDs will be changed as well. So, to recap:</p>\n<ul>\n<li>The <code>main</code> bundle changed because of its new content.</li>\n<li>The <code>vendor</code> bundle changed because its <code>module.id</code> was changed.</li>\n<li>And, the <code>runtime</code> bundle changed because it now contains a reference to a new module.</li>\n</ul>\n<p>The first and last are expected, it\'s the <code>vendor</code> hash we want to fix. Let\'s use <a href="/configuration/optimization/#optimizationmoduleids"><code>optimization.moduleIds</code></a> with <code>\'hashed\'</code> option:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-diff">  const path = require(\'path\');\n  const { CleanWebpackPlugin } = require(\'clean-webpack-plugin\');\n  const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n\n  module.exports = {\n    entry: \'./src/index.js\',\n    plugins: [\n      // new CleanWebpackPlugin([\'dist/*\']) for &#x3C; v2 versions of CleanWebpackPlugin\n      new CleanWebpackPlugin(),\n      new HtmlWebpackPlugin({\n        title: \'Caching\',\n      }),\n    ],\n    output: {\n      filename: \'[name].[contenthash].js\',\n      path: path.resolve(__dirname, \'dist\'),\n    },\n    optimization: {\n<span class="token inserted">+     moduleIds: \'hashed\',</span>\n      runtimeChunk: \'single\',\n      splitChunks: {\n        cacheGroups: {\n          vendor: {\n            test: /[\\\\/]node_modules[\\\\/]/,\n            name: \'vendors\',\n            chunks: \'all\',\n          },\n        },\n      },\n    },\n  };</code></pre>\n<p>Now, despite any new local dependencies, our <code>vendor</code> hash should stay consistent between builds:</p>\n<pre><code class="hljs language-bash"><span class="token punctuation">..</span>.\n                          Asset       Size  Chunks             Chunk Names\n   main.216e852f60c8829c2289.js  340 bytes       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  main\nvendors.55e79e5927a639d21a1b.js   69.5 KiB       1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  vendors\nruntime.725a1a51ede5ae0cfde0.js   1.42 KiB       2  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  runtime\n                     index.html  353 bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\nEntrypoint main <span class="token operator">=</span> runtime.725a1a51ede5ae0cfde0.js vendors.55e79e5927a639d21a1b.js main.216e852f60c8829c2289.js\n<span class="token punctuation">..</span>.</code></pre>\n<p>And let\'s modify our <code>src/index.js</code> to temporarily remove that extra dependency:</p>\n<p><strong>src/index.js</strong></p>\n<pre><code class="hljs language-diff">  import _ from \'lodash\';\n<span class="token deleted">- import Print from \'./print\';</span>\n<span class="token inserted">+ // import Print from \'./print\';</span>\n\n  function component() {\n    const element = document.createElement(\'div\');\n\n    // Lodash, now imported by this script\n    element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n<span class="token deleted">-   element.onclick = Print.bind(null, \'Hello webpack!\');</span>\n<span class="token inserted">+   // element.onclick = Print.bind(null, \'Hello webpack!\');</span>\n\n    return element;\n  }\n\n  document.body.appendChild(component());</code></pre>\n<p>And finally run our build again:</p>\n<pre><code class="hljs language-bash"><span class="token punctuation">..</span>.\n                          Asset       Size  Chunks             Chunk Names\n   main.ad717f2466ce655fff5c.js  274 bytes       0  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  main\nvendors.55e79e5927a639d21a1b.js   69.5 KiB       1  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  vendors\nruntime.725a1a51ede5ae0cfde0.js   1.42 KiB       2  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  runtime\n                     index.html  353 bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\nEntrypoint main <span class="token operator">=</span> runtime.725a1a51ede5ae0cfde0.js vendors.55e79e5927a639d21a1b.js main.ad717f2466ce655fff5c.js\n<span class="token punctuation">..</span>.</code></pre>\n<p>We can see that both builds yielded <code>55e79e5927a639d21a1b</code> in the <code>vendor</code> bundle\'s filename.</p>\n<h2 id="conclusion">Conclusion<a href="#conclusion" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>Caching can be complicated, but the benefit to application or site users makes it worth the effort. See the <em>Further Reading</em> section below to learn more.</p>\n'}}]);