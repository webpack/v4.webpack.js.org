(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{330:function(n,s,a){"use strict";a.r(s),s.default='<blockquote>\n<p>es6 modules</p>\n<p>commonjs</p>\n<p>amd</p>\n</blockquote>\n<h2 id="require-with-expression">require with expression<a href="#require-with-expression" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>A context is created if your request contains expressions, so the <strong>exact</strong> module is not known on compile time.</p>\n<p>Example:</p>\n<pre><code class="hljs language-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./template/\'</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">\'.ejs\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>webpack parses the <code>require()</code> call and extracts some information:</p>\n<pre><code class="hljs language-code">Directory: ./template\nRegular expression: /^.*\\.ejs$/\n</code></pre>\n<p><strong>context module</strong></p>\n<p>A context module is generated. It contains references to <strong>all modules in that directory</strong> that can be required with a request matching the regular expression. The context module contains a map which translates requests to module ids.</p>\n<p>Example:</p>\n<pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"./table.ejs"</span><span class="token operator">:</span> <span class="token number">42</span><span class="token punctuation">,</span>\n  <span class="token property">"./table-row.ejs"</span><span class="token operator">:</span> <span class="token number">43</span><span class="token punctuation">,</span>\n  <span class="token property">"./directory/folder.ejs"</span><span class="token operator">:</span> <span class="token number">44</span>\n<span class="token punctuation">}</span></code></pre>\n<p>The context module also contains some runtime logic to access the map.</p>\n<p>This means dynamic requires are supported but will cause all possible modules to be included in the bundle.</p>\n<h2 id="requirecontext"><code>require.context</code><a href="#requirecontext" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>You can create your own context with the <code>require.context()</code> function.</p>\n<p>It allows you to pass in a directory to search, a flag indicating whether subdirectories should be searched\ntoo, and a regular expression to match files against.</p>\n<p>webpack parses for <code>require.context()</code> in the code while building.</p>\n<p>The syntax is as follows:</p>\n<pre><code class="hljs language-javascript">require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span>directory<span class="token punctuation">,</span> useSubdirectories <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> regExp <span class="token operator">=</span> <span class="token regex">/^\\.\\/.*$/</span><span class="token punctuation">,</span> mode <span class="token operator">=</span> <span class="token string">\'sync\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Examples:</p>\n<pre><code class="hljs language-javascript">require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">\'./test\'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token regex">/\\.test\\.js$/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// a context with files from the test directory that can be required with a request endings with `.test.js`.</span></code></pre>\n<pre><code class="hljs language-javascript">require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">\'../\'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token regex">/\\.stories\\.js$/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// a context with all files in the parent folder and descending folders ending with `.stories.js`.</span></code></pre>\n<blockquote class="warning">\n<p>The arguments passed to <code>require.context</code> must be literals!</p>\n</blockquote>\n<h3 id="context-module-api">context module API<a href="#context-module-api" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>A context module exports a (require) function that takes one argument: the request.</p>\n<p>The exported function has 3 properties: <code>resolve</code>, <code>keys</code>, <code>id</code>.</p>\n<ul>\n<li><code>resolve</code> is a function and returns the module id of the parsed request.</li>\n<li><code>keys</code> is a function that returns an array of all possible requests that the context module can handle.</li>\n</ul>\n<p>This can be useful if you want to require all files in a directory or matching a pattern, Example:</p>\n<pre><code class="hljs language-javascript"><span class="token keyword">function</span> <span class="token function">importAll</span> <span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  r<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">importAll</span><span class="token punctuation">(</span>require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">\'../components/\'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<pre><code class="hljs language-javascript"><span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">importAll</span> <span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  r<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>key <span class="token operator">=></span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">r</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">importAll</span><span class="token punctuation">(</span>require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">\'../components/\'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// At build-time cache will be populated with all required modules.</span></code></pre>\n<ul>\n<li><code>id</code> is the module id of the context module. This may be useful for <code>module.hot.accept</code>.</li>\n</ul>\n'}}]);