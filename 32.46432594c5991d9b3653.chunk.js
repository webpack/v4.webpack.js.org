(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{291:function(e,a,o){"use strict";o.r(a),a.default='<p>In <a href="https://en.wikipedia.org/wiki/Modular_programming">modular programming</a>, developers break programs up into discrete chunks of functionality called a <em>module</em>.</p>\n<p>Each module has a smaller surface area than a full program, making verification, debugging, and testing trivial.\nWell-written <em>modules</em> provide solid abstractions and encapsulation boundaries, so that each module has a coherent design and a clear purpose within the overall application.</p>\n<p>Node.js has supported modular programming almost since its inception.\nOn the web, however, support for <em>modules</em> has been slow to arrive.\nMultiple tools exist that support modular JavaScript on the web, with a variety of benefits and limitations.\nwebpack builds on lessons learned from these systems and applies the concept of <em>modules</em> to any file in your project.</p>\n<h2 id="what-is-a-webpack-module">What is a webpack Module<a href="#what-is-a-webpack-module" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>In contrast to <a href="https://nodejs.org/api/modules.html">Node.js modules</a>, webpack <em>modules</em> can express their <em>dependencies</em> in a variety of ways. A few examples are:</p>\n<ul>\n<li>An <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import">ES2015 <code>import</code></a> statement</li>\n<li>A <a href="http://www.commonjs.org/specs/modules/1.0/">CommonJS</a> <code>require()</code> statement</li>\n<li>An <a href="https://github.com/amdjs/amdjs-api/blob/master/AMD.md">AMD</a> <code>define</code> and <code>require</code> statement</li>\n<li>An <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@import"><code>@import</code> statement</a> inside of a css/sass/less file.</li>\n<li>An image url in a stylesheet <code>url(...)</code> or HTML <code>&#x3C;img src=...></code> file.</li>\n</ul>\n<h2 id="supported-module-types">Supported Module Types<a href="#supported-module-types" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>webpack supports modules written in a variety of languages and preprocessors, via <em>loaders</em>. <em>Loaders</em> describe to webpack <strong>how</strong> to process non-JavaScript <em>modules</em> and include these <em>dependencies</em> into your <em>bundles</em>.\nThe webpack community has built <em>loaders</em> for a wide variety of popular languages and language processors, including:</p>\n<ul>\n<li><a href="http://coffeescript.org">CoffeeScript</a></li>\n<li><a href="https://www.typescriptlang.org">TypeScript</a></li>\n<li><a href="https://babeljs.io">ESNext (Babel)</a></li>\n<li><a href="http://sass-lang.com">Sass</a></li>\n<li><a href="http://lesscss.org">Less</a></li>\n<li><a href="http://stylus-lang.com">Stylus</a></li>\n<li><a href="https://elm-lang.org/">Elm</a></li>\n</ul>\n<p>And many others! Overall, webpack provides a powerful and rich API for customization that allows one to use webpack for <strong>any stack</strong>, while staying <strong>non-opinionated</strong> about your development, testing, and production workflows.</p>\n<p>For a full list, see <a href="/loaders"><strong>the list of loaders</strong></a> or <a href="/api/loaders"><strong>write your own</strong></a>.</p>\n'}}]);