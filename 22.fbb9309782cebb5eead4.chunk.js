(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{279:function(e,n,o){"use strict";o.r(n),n.default='<p>Resolvers are created using the <code>enhanced-resolve</code> package. The <code>Resolver</code>\nclass extends the <code>tapable</code> class and uses <code>tapable</code> to provide a few hooks.\nThe <code>enhanced-resolve</code> package can be used directly to create new resolvers,\nhowever any <a href="/api/node/#compiler-instance"><code>compiler</code> instance</a> has a few resolver instances that can be\ntapped into.</p>\n<p>Before reading on, make sure you at least skim through the\n<a href="https://github.com/webpack/enhanced-resolve"><code>enhanced-resolve</code></a> and <a href="/api/plugins/#tapable"><code>tapable</code></a> documentation.</p>\n<h2 id="types">Types<a href="#types" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>There are three types of built-in resolvers available on the <code>compiler</code> class:</p>\n<ul>\n<li>Normal: Resolves a module via an absolute or relative path.</li>\n<li>Context: Resolves a module within a given context.</li>\n<li>Loader: Resolves a webpack <a href="/loaders">loader</a>.</li>\n</ul>\n<p>Depending on need, any one of these built-in resolver used by the <code>compiler</code>\ncan be customized via plugins as such:</p>\n<pre><code class="hljs language-js">compiler<span class="token punctuation">.</span>resolverFactory<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">\'resolver [type]\'</span><span class="token punctuation">,</span> resolver <span class="token operator">=></span> <span class="token punctuation">{</span>\n  resolver<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>resolve<span class="token punctuation">.</span><span class="token function">tapAsync</span><span class="token punctuation">(</span><span class="token string">\'MyPlugin\'</span><span class="token punctuation">,</span> params <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Where <code>[type]</code> is one of the three resolvers mention above, specified as:</p>\n<ul>\n<li><code>normal</code></li>\n<li><code>context</code></li>\n<li><code>loader</code></li>\n</ul>\n<p>See the <code>enhanced-resolve</code> <a href="https://github.com/webpack/enhanced-resolve">documentation</a> for a full list of hooks and\ndescriptions.</p>\n<h2 id="configuration-options">Configuration Options<a href="#configuration-options" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>The resolvers mentioned above can also be customized via a configuration file\nwith the <a href="/configuration/resolve/"><code>resolve</code></a> or <a href="/configuration/resolve/#resolveloader"><code>resolveLoader</code></a> options. These options allow\nusers to change the resolving behavior through a variety of options including\nthrough resolve <code>plugins</code>.</p>\n<p>The resolver plugins, e.g. <a href="https://github.com/shaketbaby/directory-named-webpack-plugin"><code>DirectoryNamedPlugin</code></a>, can be included\ndirectly in <code>resolve.plugins</code> rather than using standard plugins. Note that the\n<code>resolve</code> configuration affects the <code>normal</code> and <code>context</code> resolvers while\n<code>resolveLoader</code> is used to modify the <code>loader</code> resolver.</p>\n'}}]);