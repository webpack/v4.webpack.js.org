(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{351:function(n,a,s){"use strict";s.r(a),a.default='<p>Bundle loader for webpack</p>\n<h2 id="install">Install<a href="#install" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<pre><code class="hljs language-bash"><span class="token function">npm</span> i bundle-loader --save</code></pre>\n<h2 id="usage">Usage<a href="#usage" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.bundle\\.js$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token string">\'bundle-loader\'</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n<p>The chunk is requested, when you require the bundle.</p>\n<p><strong>file.js</strong></p>\n<pre><code class="hljs language-js"><span class="token keyword">import</span> bundle <span class="token keyword">from</span> <span class="token string">\'./file.bundle.js\'</span><span class="token punctuation">;</span></code></pre>\n<p>To wait until the chunk is available (and get the exports)\nyou need to async wait for it.</p>\n<pre><code class="hljs language-js"><span class="token function">bundle</span><span class="token punctuation">(</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// use the file like it was required</span>\n  <span class="token keyword">const</span> file <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./file.js\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>This wraps the <code>require(\'file.js\')</code> in a <code>require.ensure</code> block</p>\n<p>Multiple callbacks can be added. They will be executed in the order of addition.</p>\n<pre><code class="hljs language-js"><span class="token function">bundle</span><span class="token punctuation">(</span>callbackTwo<span class="token punctuation">)</span>\n<span class="token function">bundle</span><span class="token punctuation">(</span>callbackThree<span class="token punctuation">)</span></code></pre>\n<p>If a callback is added after dependencies were loaded, it will be called immediately.</p>\n<h2 id="options">Options<a href="#options" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<table>\n<thead>\n<tr>\n<th align="center">Name</th>\n<th align="center">Type</th>\n<th align="center">Default</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><strong><code>lazy</code></strong><p class="description mobile"><code>{Boolean}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Boolean}</code></td>\n<td align="center"><code>false</code></td>\n<td align="left">Loads the imported bundle asynchronously</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><strong><code>name</code></strong><p class="description mobile"><code>{String}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{String}</code></td>\n<td align="center"><code>[id].[name]</code></td>\n<td align="left">Configure a custom filename for your imported bundle</td>\n</tr>\n</tbody>\n</table>\n<h3 id="lazy"><code>lazy</code><a href="#lazy" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>The file is requested when you require the <code>bundle-loader</code>. If you want it to request it lazy, use:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'bundle-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    lazy<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n<pre><code class="hljs language-js"><span class="token keyword">import</span> bundle <span class="token keyword">from</span> <span class="token string">\'./file.bundle.js\'</span>\n\n<span class="token function">bundle</span><span class="token punctuation">(</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n<blockquote>\n<p>ℹ️  The chunk is not requested until you call the load function</p>\n</blockquote>\n<h3 id="name"><code>name</code><a href="#name" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>You may set name for a bundle using the <code>name</code> options parameter.\nSee <a href="https://github.com/webpack/loader-utils#interpolatename">documentation</a>.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'bundle-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token string">\'[name]\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n<blockquote>\n<p>:warning: chunks created by the loader will be named according to the\n<a href="/configuration/output/#outputchunkfilename"><code>output.chunkFilename</code></a> rule, which defaults to <code>[id].[name]</code>. Here <code>[name]</code> corresponds to the chunk name set in the <code>name</code> options parameter.</p>\n</blockquote>\n<h2 id="examples">Examples<a href="#examples" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<pre><code class="hljs language-js"><span class="token keyword">import</span> bundle <span class="token keyword">from</span> <span class="token string">\'./file.bundle.js\'</span></code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n   index<span class="token punctuation">:</span> <span class="token string">\'./App.js\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dest\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'[name].js\'</span><span class="token punctuation">,</span>\n    <span class="token comment">// or whatever other format you want</span>\n    chunkFilename<span class="token punctuation">:</span> <span class="token string">\'[name].[id].js\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.bundle\\.js$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          loader<span class="token punctuation">:</span> <span class="token string">\'bundle-loader\'</span><span class="token punctuation">,</span>\n          options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            name<span class="token punctuation">:</span> <span class="token string">\'my-chunk\'</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n<p>Normal chunks will show up using the <code>filename</code> rule above, and be named according to their <code>[chunkname]</code>.</p>\n<p>Chunks from <code>bundle-loader</code>, however will load using the <code>chunkFilename</code> rule, so the example files will produce <code>my-chunk.1.js</code> and <code>file-2.js</code> respectively.</p>\n<p>You can also use <code>chunkFilename</code> to add hash values to the filename, since putting <code>[hash]</code> in the bundle options parameter does not work correctly.</p>\n<h2 id="maintainers">Maintainers<a href="#maintainers" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<table>\n  <tbody>\n    <tr>\n      <td align="center">\n        <a href="https://github.com/bebraw">\n          <img width="150" height="150" src="https://github.com/bebraw.png?v=3&s=150">\n          </br>\n          Juho Vepsäläinen\n        </a>\n      </td>\n      <td align="center">\n        <a href="https://github.com/d3viant0ne">\n          <img width="150" height="150" src="https://github.com/d3viant0ne.png?v=3&s=150">\n          </br>\n          Joshua Wiens\n        </a>\n      </td>\n      <td align="center">\n        <a href="https://github.com/michael-ciniawsky">\n          <img width="150" height="150" src="https://github.com/michael-ciniawsky.png?v=3&s=150">\n          </br>\n          Michael Ciniawsky\n        </a>\n      </td>\n      <td align="center">\n        <a href="https://github.com/evilebottnawi">\n          <img width="150" height="150" src="https://github.com/evilebottnawi.png?v=3&s=150">\n          </br>\n          Alexander Krasnoyarov\n        </a>\n      </td>\n    </tr>\n  <tbody>\n</table>\n'}}]);