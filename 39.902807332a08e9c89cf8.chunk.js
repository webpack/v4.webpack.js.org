(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{298:function(n,s,a){"use strict";a.r(s),s.default='<p><a href="https://github.com/webpack/webpack-dev-server">webpack-dev-server</a> can be used to quickly develop an application. See the <a href="/guides/development/">development guide</a> to get started.</p>\n<p>This page describes the options that affect the behavior of webpack-dev-server (short: dev-server).</p>\n<blockquote class="tip">\n<p>Options that are compatible with <a href="https://github.com/webpack/webpack-dev-middleware">webpack-dev-middleware</a> have ðŸ”‘ next to them.</p>\n</blockquote>\n<h2 id="devserver"><code>devServer</code><a href="#devserver" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>object</code></p>\n<p>This set of options is picked up by <a href="https://github.com/webpack/webpack-dev-server">webpack-dev-server</a> and can be used to change its behavior in various ways. Here\'s a simple example that gzips and serves everything from our <code>dist/</code> directory in the project root:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript"><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    contentBase<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    compress<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    port<span class="token punctuation">:</span> <span class="token number">9000</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>When the server is started, there will be a message prior to the list of resolved modules:</p>\n<pre><code class="hljs language-bash">http://localhost:9000/\nwebpack output is served from /build/\nContent not from webpack is served from /path/to/dist/</code></pre>\n<p>that will give some background on where the server is located and what it\'s serving.</p>\n<p>If you\'re using dev-server through the Node.js API, the options in <code>devServer</code> will be ignored. Pass the options as a second parameter instead: <code>new WebpackDevServer(compiler, {...})</code>. <a href="https://github.com/webpack/webpack-dev-server/tree/master/examples/api/simple">See here</a> for an example of how to use webpack-dev-server through the Node.js API.</p>\n<blockquote class="warning">\n<p>Be aware that when <a href="/configuration/configuration-types/#exporting-multiple-configurations">exporting multiple configurations</a> only the <code>devServer</code> options for the first configuration will be taken into account and used for all the configurations in the array.</p>\n</blockquote>\n<blockquote class="tip">\n<p>If you\'re having trouble, navigating to the <code>/webpack-dev-server</code> route will show where files are served. For example, <code>http://localhost:9000/webpack-dev-server</code>.</p>\n</blockquote>\n<blockquote class="tip">\n<p>HTML template is required to serve the bundle, usually it is an <code>index.html</code> file. Make sure that script references are added into HTML, webpack-dev-server doesn\'t inject them automatically.</p>\n</blockquote>\n<h2 id="devserverafter"><code>devServer.after</code><a href="#devserverafter" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>function (app, server, compiler)</code></p>\n<p>Provides the ability to execute custom middleware after all other middleware\ninternally within the server.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    after<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> server<span class="token punctuation">,</span> compiler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// do fancy stuff</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="devserverallowedhosts"><code>devServer.allowedHosts</code><a href="#devserverallowedhosts" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>[string]</code></p>\n<p>This option allows you to whitelist services that are allowed to access the dev server.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    allowedHosts<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token string">\'host.com\'</span><span class="token punctuation">,</span>\n      <span class="token string">\'subdomain.host.com\'</span><span class="token punctuation">,</span>\n      <span class="token string">\'subdomain2.host.com\'</span><span class="token punctuation">,</span>\n      <span class="token string">\'host2.com\'</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Mimicking django\'s <code>ALLOWED_HOSTS</code>, a value beginning with <code>.</code> can be used as a subdomain wildcard. <code>.host.com</code> will match <code>host.com</code>, <code>www.host.com</code>, and any other subdomain of <code>host.com</code>.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// this achieves the same effect as the first example</span>\n    <span class="token comment">// with the bonus of not having to update your config</span>\n    <span class="token comment">// if new subdomains need to access the dev server</span>\n    allowedHosts<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token string">\'.host.com\'</span><span class="token punctuation">,</span>\n      <span class="token string">\'host2.com\'</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>To use this option with the CLI pass the <code>--allowed-hosts</code> option a comma-delimited string.</p>\n<pre><code class="hljs language-bash">webpack-dev-server --entry /entry/file --output-path /output/path --allowed-hosts .host.com,host2.com</code></pre>\n<h2 id="devserverbefore"><code>devServer.before</code><a href="#devserverbefore" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>function (app, server, compiler)</code></p>\n<p>Provides the ability to execute custom middleware prior to all other middleware\ninternally within the server. This could be used to define custom handlers, for\nexample:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    before<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> server<span class="token punctuation">,</span> compiler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">\'/some/path\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> custom<span class="token punctuation">:</span> <span class="token string">\'response\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="devserverbonjour"><code>devServer.bonjour</code><a href="#devserverbonjour" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>boolean = false</code></p>\n<p>This option broadcasts the server via <a href="http://www.zeroconf.org/">ZeroConf</a> networking on start</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    bonjour<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="hljs language-bash">webpack-dev-server --bonjour</code></pre>\n<h2 id="devserverclientloglevel"><code>devServer.clientLogLevel</code><a href="#devserverclientloglevel" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>string = \'info\': \'silent\' | \'trace\' | \'debug\' | \'info\' | \'warn\' | \'error\' | \'none\' | \'warning\'</code></p>\n<blockquote class="warning">\n<p><code>none</code> and <code>warning</code> are going to be deprecated at the next major version.</p>\n</blockquote>\n<p>When using <em>inline mode</em>, the console in your DevTools will show you messages e.g. before reloading, before an error or when <a href="/concepts/hot-module-replacement/">Hot Module Replacement</a> is enabled.</p>\n<p><code>devServer.clientLogLevel</code> may be too verbose, you can turn logging off by setting it to  <code>\'silent\'</code>.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    clientLogLevel<span class="token punctuation">:</span> <span class="token string">\'silent\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="hljs language-bash">webpack-dev-server --client-log-level silent</code></pre>\n<h2 id="devservercolor---cli-only"><code>devServer.color</code> - CLI only<a href="#devservercolor---cli-only" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>boolean</code></p>\n<p>Enables/Disables colors on the console.</p>\n<pre><code class="hljs language-bash">webpack-dev-server --color</code></pre>\n<h2 id="devservercompress"><code>devServer.compress</code><a href="#devservercompress" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>boolean</code></p>\n<p>Enable <a href="https://betterexplained.com/articles/how-to-optimize-your-site-with-gzip-compression/">gzip compression</a> for everything served:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    compress<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="hljs language-bash">webpack-dev-server --compress</code></pre>\n<h2 id="devservercontentbase"><code>devServer.contentBase</code><a href="#devservercontentbase" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>boolean: false</code> <code>string</code> <code>[string]</code> <code>number</code></p>\n<p>Tell the server where to serve content from. This is only necessary if you want to serve static files. <a href="#devserverpublicpath-"><code>devServer.publicPath</code></a> will be used to determine where the bundles should be served from, and takes precedence.</p>\n<blockquote class="tip">\n<p>It is recommended to use an absolute path.</p>\n</blockquote>\n<p>By default it will use your current working directory to serve content. To disable <code>contentBase</code> set it to <code>false</code>.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    contentBase<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'public\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>It is also possible to serve from multiple directories:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    contentBase<span class="token punctuation">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'public\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'assets\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="hljs language-bash">webpack-dev-server --content-base /path/to/content/dir</code></pre>\n<h2 id="devserverdisablehostcheck"><code>devServer.disableHostCheck</code><a href="#devserverdisablehostcheck" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>boolean</code></p>\n<p>When set to <code>true</code> this option bypasses host checking. <strong>THIS IS NOT RECOMMENDED</strong> as apps that do not check the host are vulnerable to DNS rebinding attacks.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    disableHostCheck<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="hljs language-bash">webpack-dev-server --disable-host-check</code></pre>\n<h2 id="devserverfilename-"><code>devServer.filename</code> ðŸ”‘<a href="#devserverfilename-" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>string</code></p>\n<p>This option lets you reduce the compilations in <a href="#devserverlazy-">lazy mode</a>.\nBy default in <a href="#devserverlazy-">lazy mode</a>, every request results in a new compilation. With <code>filename</code>, it\'s possible to only compile when a certain file is requested.</p>\n<p>If <a href="/configuration/output/#outputfilename"><code>output.filename</code></a> is set to <code>\'bundle.js\'</code> and <code>devServer.filename</code> is used like this:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'bundle.js\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    lazy<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    filename<span class="token punctuation">:</span> <span class="token string">\'bundle.js\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>It will now only compile the bundle when <code>/bundle.js</code> is requested.</p>\n<blockquote class="tip">\n<p><code>filename</code> has no effect when used without <a href="#devserverlazy-">lazy mode</a>.</p>\n</blockquote>\n<h2 id="devserverheaders-"><code>devServer.headers</code> ðŸ”‘<a href="#devserverheaders-" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>object</code></p>\n<p>Adds headers to all responses:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token string">\'X-Custom-Foo\'</span><span class="token punctuation">:</span> <span class="token string">\'bar\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="devserverhistoryapifallback"><code>devServer.historyApiFallback</code><a href="#devserverhistoryapifallback" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>boolean = false</code> <code>object</code></p>\n<p>When using the <a href="https://developer.mozilla.org/en-US/docs/Web/API/History">HTML5 History API</a>, the <code>index.html</code> page will likely have to be served in place of any <code>404</code> responses. Enable <code>devServer.historyApiFallback</code> by setting it to <code>true</code>:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    historyApiFallback<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>By passing an object this behavior can be controlled further using options like <code>rewrites</code>:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    historyApiFallback<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      rewrites<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token regex">/^\\/$/</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token string">\'/views/landing.html\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token regex">/^\\/subpage/</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token string">\'/views/subpage.html\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token regex">/./</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token string">\'/views/404.html\'</span> <span class="token punctuation">}</span>\n      <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>When using dots in your path (common with Angular), you may need to use the <code>disableDotRule</code>:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    historyApiFallback<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      disableDotRule<span class="token punctuation">:</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="hljs language-bash">webpack-dev-server --history-api-fallback</code></pre>\n<p>For more options and information, see the <a href="https://github.com/bripkens/connect-history-api-fallback">connect-history-api-fallback</a> documentation.</p>\n<h2 id="devserverhost"><code>devServer.host</code><a href="#devserverhost" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>string = \'localhost\'</code></p>\n<p>Specify a host to use. If you want your server to be accessible externally, specify it like this:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    host<span class="token punctuation">:</span> <span class="token string">\'0.0.0.0\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="hljs language-bash">webpack-dev-server --host 0.0.0.0</code></pre>\n<h2 id="devserverhot"><code>devServer.hot</code><a href="#devserverhot" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>boolean</code></p>\n<p>Enable webpack\'s <a href="/concepts/hot-module-replacement/">Hot Module Replacement</a> feature:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    hot<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<blockquote class="tip">\n<p>Note that <a href="/plugins/hot-module-replacement-plugin/"><code>webpack.HotModuleReplacementPlugin</code></a> is required to fully enable HMR. If <code>webpack</code> or <code>webpack-dev-server</code> are launched with the <code>--hot</code> option, this plugin will be added automatically, so you may not need to add this to your <code>webpack.config.js</code>. See the <a href="/concepts/hot-module-replacement/">HMR concepts page</a> for more information.</p>\n</blockquote>\n<h2 id="devserverhotonly"><code>devServer.hotOnly</code><a href="#devserverhotonly" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>boolean</code></p>\n<p>Enables Hot Module Replacement (see <a href="#devserverhot"><code>devServer.hot</code></a>) without page refresh as fallback in case of build failures.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    hotOnly<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="hljs language-bash">webpack-dev-server --hot-only</code></pre>\n<h2 id="devserverhttp2"><code>devServer.http2</code><a href="#devserverhttp2" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>boolean = false</code></p>\n<p>Serve over HTTP/2 using <a href="https://www.npmjs.com/package/spdy">spdy</a>. This option is ignored for Node 10.0.0 and above, as spdy is broken for those versions. The dev server will migrate over to Node\'s built-in HTTP/2 once <a href="https://expressjs.com/">Express</a> supports it.</p>\n<p>If <code>devServer.http2</code> is not explicitly set to <code>false</code>, it will default to <code>true</code> when <a href="#devserverhttps"><code>devServer.https</code></a> is enabled. When <code>devServer.http2</code> is enabled but the server is unable to serve over HTTP/2, the server defaults to HTTPS.</p>\n<p>HTTP/2 with a self-signed certificate:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    http2<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Provide your own certificate using the <a href="#devserverhttps">https</a> option:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    http2<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    https<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      key<span class="token punctuation">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">\'/path/to/server.key\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      cert<span class="token punctuation">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">\'/path/to/server.crt\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      ca<span class="token punctuation">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">\'/path/to/ca.pem\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Usage via CLI</p>\n<pre><code class="hljs language-bash">webpack-dev-server --http2</code></pre>\n<p>To pass your own certificate via CLI, use the following options</p>\n<pre><code class="hljs language-bash">webpack-dev-server --http2 --key /path/to/server.key --cert /path/to/server.crt --cacert /path/to/ca.pem</code></pre>\n<h2 id="devserverhttps"><code>devServer.https</code><a href="#devserverhttps" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>boolean</code> <code>object</code></p>\n<p>By default dev-server will be served over HTTP. It can optionally be served over HTTP/2 with HTTPS:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    https<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>With the above setting a self-signed certificate is used, but you can provide your own:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    https<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      key<span class="token punctuation">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">\'/path/to/server.key\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      cert<span class="token punctuation">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">\'/path/to/server.crt\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      ca<span class="token punctuation">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">\'/path/to/ca.pem\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>This object is passed straight to Node.js HTTPS module, so see the <a href="https://nodejs.org/api/https.html">HTTPS documentation</a> for more information.</p>\n<p>Usage via the CLI</p>\n<pre><code class="hljs language-bash">webpack-dev-server --https</code></pre>\n<p>To pass your own certificate via the CLI use the following options</p>\n<pre><code class="hljs language-bash">webpack-dev-server --https --key /path/to/server.key --cert /path/to/server.crt --cacert /path/to/ca.pem</code></pre>\n<h2 id="devserverindex"><code>devServer.index</code><a href="#devserverindex" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>string</code></p>\n<p>The filename that is considered the index file.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    index<span class="token punctuation">:</span> <span class="token string">\'index.html\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="devserverinfo---cli-only"><code>devServer.info</code> - CLI only<a href="#devserverinfo---cli-only" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>boolean</code></p>\n<p>Output cli information. It is enabled by default.</p>\n<pre><code class="hljs language-bash">webpack-dev-server --info<span class="token operator">=</span>false</code></pre>\n<h2 id="devserverinjectclient"><code>devServer.injectClient</code><a href="#devserverinjectclient" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>boolean = false</code> <code>function (compilerConfig) => boolean</code></p>\n<p>Tells <code>devServer</code> to inject a client. Setting <code>devServer.injectClient</code> to <code>true</code> will result in always injecting a client. It is possible to provide a function to inject conditionally:</p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    injectClient<span class="token punctuation">:</span> <span class="token punctuation">(</span>compilerConfig<span class="token punctuation">)</span> <span class="token operator">=></span> compilerConfig<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">\'only-include\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="devserverinjecthot"><code>devServer.injectHot</code><a href="#devserverinjecthot" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>boolean = false</code> <code>function (compilerConfig) => boolean</code></p>\n<p>Tells <code>devServer</code> to inject a Hot Module Replacement. Setting <code>devServer.injectHot</code> to <code>true</code> will result in always injecting. It is possible to provide a function to inject conditionally:</p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    hot<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    injectHot<span class="token punctuation">:</span> <span class="token punctuation">(</span>compilerConfig<span class="token punctuation">)</span> <span class="token operator">=></span> compilerConfig<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">\'only-include\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<blockquote class="warning">\n<p>Make sure that <a href="#devserverhot"><code>devServer.hot</code></a> is set to <code>true</code> because <code>devServer.injectHot</code> only works with HMR.</p>\n</blockquote>\n<h2 id="devserverinline"><code>devServer.inline</code><a href="#devserverinline" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>boolean</code></p>\n<p>Toggle between the dev-server\'s two different modes. By default the application will be served with <em>inline mode</em> enabled. This means that a script will be inserted in your bundle to take care of live reloading, and build messages will appear in the browser console.</p>\n<p>It is also possible to use <strong>iframe mode</strong>, which uses an <code>&#x3C;iframe></code> under a notification bar with messages about the build. To switch to <strong>iframe mode</strong>:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    inline<span class="token punctuation">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="hljs language-bash">webpack-dev-server --inline<span class="token operator">=</span>false</code></pre>\n<blockquote class="tip">\n<p>Inline mode is recommended for <a href="/plugins/hot-module-replacement-plugin/">Hot Module Replacement</a> as it includes an HMR trigger from the websocket. Polling mode can be used as an alternative, but requires an additional entry point, <code>\'webpack/hot/poll?1000\'</code>.</p>\n</blockquote>\n<h2 id="devserverlazy-"><code>devServer.lazy</code> ðŸ”‘<a href="#devserverlazy-" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>boolean</code></p>\n<p>When <code>devServer.lazy</code> is enabled, the dev-server will only compile the bundle when it gets requested. This means that webpack will not watch any file changes. We call this <strong>lazy mode</strong>.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    lazy<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="hljs language-bash">webpack-dev-server --lazy</code></pre>\n<blockquote class="tip">\n<p><a href="#devserverwatchoptions-"><code>watchOptions</code></a> will have no effect when used with <strong>lazy mode</strong>.</p>\n</blockquote>\n<blockquote class="tip">\n<p>If you use the CLI, make sure <strong>inline mode</strong> is disabled.</p>\n</blockquote>\n<h2 id="devserverlivereload"><code>devServer.liveReload</code><a href="#devserverlivereload" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>boolean = true</code></p>\n<p>By default, the dev-server will reload/refresh the page when file changes are detected. <a href="#devserverhot"><code>devServer.hot</code></a> option must be disabled or <a href="#devserverwatchcontentbase"><code>devServer.watchContentBase</code></a> option must be enabled in order for <code>liveReload</code> to take effect. Disable <code>devServer.liveReload</code> by setting it to <code>false</code>:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    liveReload<span class="token punctuation">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="hljs language-bash">webpack-dev-server --no-live-reload</code></pre>\n<h2 id="devservermimetypes-"><code>devServer.mimeTypes</code> ðŸ”‘<a href="#devservermimetypes-" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>object</code></p>\n<p>Allows dev-server to register custom mime types.\nThe object is passed to the underlying <code>webpack-dev-middleware</code>.\nSee <a href="https://github.com/webpack/webpack-dev-middleware#mimetypes">documentation</a> for usage notes.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    mimeTypes<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">\'text/html\'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'phtml\'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="devservernoinfo-"><code>devServer.noInfo</code> ðŸ”‘<a href="#devservernoinfo-" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>boolean = false</code></p>\n<p>Tells dev-server to supress messages like the webpack bundle information. Errors and warnings will still be shown.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    noInfo<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="devserveronlistening"><code>devServer.onListening</code><a href="#devserveronlistening" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>function (server)</code></p>\n<p>Provides an option to execute a custom function when <code>webpack-dev-server</code> starts listening for connections on a port.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    onListening<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> port <span class="token operator">=</span> server<span class="token punctuation">.</span>listeningApp<span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>port<span class="token punctuation">;</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Listening on port:\'</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="devserveropen"><code>devServer.open</code><a href="#devserveropen" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>boolean: false</code> <code>string</code></p>\n<p>Tells dev-server to open the browser after server had been started. Set it to <code>true</code> to open your default browser.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    open<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Provide browser name to use instead of the default one:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    open<span class="token punctuation">:</span> <span class="token string">\'Google Chrome\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="hljs language-bash">webpack-dev-server --open <span class="token string">\'Google Chrome\'</span></code></pre>\n<blockquote class="tip">\n<p>The browser application name is platform dependent. Don\'t hard code it in reusable modules. For example, <code>\'Chrome\'</code> is <code>\'Google Chrome\'</code> on macOS, <code>\'google-chrome\'</code> on Linux and <code>\'chrome\'</code> on Windows.</p>\n</blockquote>\n<h2 id="devserveropenpage"><code>devServer.openPage</code><a href="#devserveropenpage" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>string</code> <code>[string]</code></p>\n<p>Specify a page to navigate to when opening the browser.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    openPage<span class="token punctuation">:</span> <span class="token string">\'/different/page\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="hljs language-bash">webpack-dev-server --open-page <span class="token string">"/different/page"</span></code></pre>\n<p>If you wish to specify multiple pages to open in the browser.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    openPage<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'/different/page1\'</span><span class="token punctuation">,</span> <span class="token string">\'/different/page2\'</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="hljs language-bash">webpack-dev-server --open-page <span class="token string">"/different/page1,/different/page2"</span></code></pre>\n<h2 id="devserveroverlay"><code>devServer.overlay</code><a href="#devserveroverlay" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>boolean = false</code> <code>object: { errors boolean = false, warnings boolean = false }</code></p>\n<p>Shows a full-screen overlay in the browser when there are compiler errors or warnings. If you want to show only compiler errors:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    overlay<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>If you want to show warnings as well as errors:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    overlay<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      warnings<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      errors<span class="token punctuation">:</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="devserverpfx"><code>devServer.pfx</code><a href="#devserverpfx" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>string</code></p>\n<p>When used via the CLI, a path to an SSL .pfx file. If used in options, it should be the bytestream of the .pfx file.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    pfx<span class="token punctuation">:</span> <span class="token string">\'/path/to/file.pfx\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="hljs language-bash">webpack-dev-server --pfx /path/to/file.pfx</code></pre>\n<h2 id="devserverpfxpassphrase"><code>devServer.pfxPassphrase</code><a href="#devserverpfxpassphrase" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>string</code></p>\n<p>The passphrase to a SSL PFX file.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    pfxPassphrase<span class="token punctuation">:</span> <span class="token string">\'passphrase\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="hljs language-bash">webpack-dev-server --pfx-passphrase passphrase</code></pre>\n<h2 id="devserverport"><code>devServer.port</code><a href="#devserverport" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>number</code></p>\n<p>Specify a port number to listen for requests on:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    port<span class="token punctuation">:</span> <span class="token number">8080</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="hljs language-bash">webpack-dev-server --port 8080</code></pre>\n<h2 id="devserverproxy"><code>devServer.proxy</code><a href="#devserverproxy" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>object</code> <code>[object, function]</code></p>\n<p>Proxying some URLs can be useful when you have a separate API backend development server and you want to send API requests on the same domain.</p>\n<p>The dev-server makes use of the powerful <a href="https://github.com/chimurai/http-proxy-middleware">http-proxy-middleware</a> package. Check out its <a href="https://github.com/chimurai/http-proxy-middleware#options">documentation</a> for more advanced usages. Note that some of <code>http-proxy-middleware</code>\'s features do not require a <code>target</code> key, e.g. its <code>router</code> feature, but you will still need to include a <code>target</code> key in your config here, otherwise <code>webpack-dev-server</code> won\'t pass it along to <code>http-proxy-middleware</code>).</p>\n<p>With a backend on <code>localhost:3000</code>, you can use this to enable proxying:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token string">\'/api\'</span><span class="token punctuation">:</span> <span class="token string">\'http://localhost:3000\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>A request to <code>/api/users</code> will now proxy the request to <code>http://localhost:3000/api/users</code>.</p>\n<p>If you don\'t want <code>/api</code> to be passed along, we need to rewrite the path:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token string">\'/api\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        target<span class="token punctuation">:</span> <span class="token string">\'http://localhost:3000\'</span><span class="token punctuation">,</span>\n        pathRewrite<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">\'^/api\'</span> <span class="token punctuation">:</span> <span class="token string">\'\'</span><span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>A backend server running on HTTPS with an invalid certificate will not be accepted by default. If you want to, modify your config like this:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token string">\'/api\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        target<span class="token punctuation">:</span> <span class="token string">\'https://other-server.example.com\'</span><span class="token punctuation">,</span>\n        secure<span class="token punctuation">:</span> <span class="token boolean">false</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Sometimes you don\'t want to proxy everything. It is possible to bypass the proxy based on the return value of a function.</p>\n<p>In the function you get access to the request, response and proxy options.</p>\n<ul>\n<li>Return <code>null</code> or <code>undefined</code> to continue processing the request with proxy.</li>\n<li>Return <code>false</code> to produce a 404 error for the request.</li>\n<li>Return a path to serve from, instead of continuing to proxy the request.</li>\n</ul>\n<p>E.g. for a browser request, you want to serve a HTML page, but for an API request you want to proxy it. You could do something like this:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token string">\'/api\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        target<span class="token punctuation">:</span> <span class="token string">\'http://localhost:3000\'</span><span class="token punctuation">,</span>\n        bypass<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> proxyOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>accept<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">\'html\'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Skipping proxy for browser request.\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> <span class="token string">\'/index.html\'</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>If you want to proxy multiple, specific paths to the same target, you can use an array of one or more objects with a <code>context</code> property:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    proxy<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n      context<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'/auth\'</span><span class="token punctuation">,</span> <span class="token string">\'/api\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      target<span class="token punctuation">:</span> <span class="token string">\'http://localhost:3000\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Note that requests to root won\'t be proxied by default. To enable root proxying, the <code>devServer.index</code> option should be specified as a falsy value:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    index<span class="token punctuation">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// specify to enable root proxying</span>\n    host<span class="token punctuation">:</span> <span class="token string">\'...\'</span><span class="token punctuation">,</span>\n    contentBase<span class="token punctuation">:</span> <span class="token string">\'...\'</span><span class="token punctuation">,</span>\n    proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      context<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      target<span class="token punctuation">:</span> <span class="token string">\'http://localhost:1234\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>The origin of the host header is kept when proxying by default, you can set <code>changeOrigin</code> to <code>true</code> to override this behaviour. It is useful in some cases like using <a href="https://en.wikipedia.org/wiki/Virtual_hosting#Name-based">name-based virtual hosted sites</a>.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token string">\'/api\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        target<span class="token punctuation">:</span> <span class="token string">\'http://localhost:3000\'</span><span class="token punctuation">,</span>\n        changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="devserverprogress---cli-only"><code>devServer.progress</code> - CLI only<a href="#devserverprogress---cli-only" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>boolean</code></p>\n<p>Output running progress to console.</p>\n<pre><code class="hljs language-bash">webpack-dev-server --progress</code></pre>\n<h2 id="devserverpublic"><code>devServer.public</code><a href="#devserverpublic" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>string</code></p>\n<p>When using <em>inline mode</em> and you\'re proxying dev-server, the inline client script does not always know where to connect to. It will try to guess the URL of the server based on <code>window.location</code>, but if that fails you\'ll need to use this.</p>\n<p>For example, the dev-server is proxied by nginx, and available on <code>myapp.test</code>:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span><span class="token punctuation">:</span> <span class="token string">\'myapp.test:80\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="hljs language-bash">webpack-dev-server --public myapp.test:80</code></pre>\n<h2 id="devserverpublicpath-"><code>devServer.publicPath</code> ðŸ”‘<a href="#devserverpublicpath-" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>string = \'/\'</code></p>\n<p>The bundled files will be available in the browser under this path.</p>\n<p>Imagine that the server is running under <code>http://localhost:8080</code> and <a href="/configuration/output/#outputfilename"><code>output.filename</code></a> is set to <code>bundle.js</code>. By default the <code>devServer.publicPath</code> is <code>\'/\'</code>, so your bundle is available as <code>http://localhost:8080/bundle.js</code>.</p>\n<p>Change <code>devServer.publicPath</code> to put bundle under specific directory:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    publicPath<span class="token punctuation">:</span> <span class="token string">\'/assets/\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>The bundle will now be available as <code>http://localhost:8080/assets/bundle.js</code>.</p>\n<blockquote class="tip">\n<p>Make sure <code>devServer.publicPath</code> always starts and ends with a forward slash.</p>\n</blockquote>\n<p>It is also possible to use a full URL.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    publicPath<span class="token punctuation">:</span> <span class="token string">\'http://localhost:8080/assets/\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>The bundle will also be available as <code>http://localhost:8080/assets/bundle.js</code>.</p>\n<blockquote class="tip">\n<p>It is recommended that <code>devServer.publicPath</code> is the same as <a href="/configuration/output/#outputpublicpath"><code>output.publicPath</code></a>.</p>\n</blockquote>\n<h2 id="devserverquiet-"><code>devServer.quiet</code> ðŸ”‘<a href="#devserverquiet-" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>boolean</code></p>\n<p>With <code>devServer.quiet</code> enabled, nothing except the initial startup information will be written to the console. This also means that errors or warnings from webpack are not visible.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    quiet<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="hljs language-bash">webpack-dev-server --quiet</code></pre>\n<h2 id="devserverserveindex"><code>devServer.serveIndex</code><a href="#devserverserveindex" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>boolean = true</code></p>\n<p>Tells dev-server to use <a href="https://github.com/expressjs/serve-index"><code>serveIndex</code></a> middleware when enabled.</p>\n<p><a href="https://github.com/expressjs/serve-index"><code>serveIndex</code></a> middleware generates directory listings on viewing directories that don\'t have an index.html file.</p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    serveIndex<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="devserversetup"><code>devServer.setup</code><a href="#devserversetup" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>function (app, server)</code></p>\n<blockquote class="warning">\n<p>This option is <strong>deprecated</strong> in favor of <a href="#devserverbefore"><code>devServer.before</code></a> and will be removed in v3.0.0.</p>\n</blockquote>\n<p>Here you can access the Express app object and add your own custom middleware to it.\nFor example, to define custom handlers for some paths:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    setup<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> server<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">\'/some/path\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> custom<span class="token punctuation">:</span> <span class="token string">\'response\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="devserversocket"><code>devServer.socket</code><a href="#devserversocket" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>string</code></p>\n<p>The Unix socket to listen to (instead of a host).</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    socket<span class="token punctuation">:</span> <span class="token string">\'socket\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="hljs language-bash">webpack-dev-server --socket socket</code></pre>\n<h2 id="devserversockhost"><code>devServer.sockHost</code><a href="#devserversockhost" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>string</code></p>\n<p>Tells clients connected to <code>devServer</code> to use provided socket host.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    sockHost<span class="token punctuation">:</span> <span class="token string">\'myhost.test\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="devserversockpath"><code>devServer.sockPath</code><a href="#devserversockpath" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>string = \'/sockjs-node\'</code></p>\n<p>The path at which to connect to the reloading socket.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    sockPath<span class="token punctuation">:</span> <span class="token string">\'/socket\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="hljs language-bash">webpack-dev-server --sockPath /socket</code></pre>\n<h2 id="devserversockport"><code>devServer.sockPort</code><a href="#devserversockport" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>number</code> <code>string</code></p>\n<p>Tells clients connected to <code>devServer</code> to use provided socket port.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    sockPort<span class="token punctuation">:</span> <span class="token number">8080</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="devserverstaticoptions"><code>devServer.staticOptions</code><a href="#devserverstaticoptions" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>It is possible to configure advanced options for serving static files from <code>contentBase</code>. See the <a href="http://expressjs.com/en/4x/api.html#express.static">Express documentation</a> for the possible options.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    staticOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      redirect<span class="token punctuation">:</span> <span class="token boolean">false</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<blockquote class="tip">\n<p>This only works when using <a href="#devservercontentbase"><code>devServer.contentBase</code></a> as a <code>string</code>.</p>\n</blockquote>\n<h2 id="devserverstats-"><code>devServer.stats</code> ðŸ”‘<a href="#devserverstats-" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>string: \'none\' | \'errors-only\' | \'minimal\' | \'normal\' | \'verbose\'</code> <code>object</code></p>\n<p>This option lets you precisely control what bundle information gets displayed. This can be a nice middle ground if you want some bundle information, but not all of it.</p>\n<p>To show only errors in your bundle:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    stats<span class="token punctuation">:</span> <span class="token string">\'errors-only\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>For more information, see the <a href="/configuration/stats/"><strong>stats documentation</strong></a>.</p>\n<blockquote class="tip">\n<p>This option has no effect when used with <code>quiet</code> or <code>noInfo</code>.</p>\n</blockquote>\n<h2 id="devserverstdin---cli-only"><code>devServer.stdin</code> - CLI only<a href="#devserverstdin---cli-only" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>boolean</code></p>\n<p>This option closes the server when stdin ends.</p>\n<pre><code class="hljs language-bash">webpack-dev-server --stdin</code></pre>\n<h2 id="devservertransportmode"><code>devServer.transportMode</code><a href="#devservertransportmode" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>string = \'sockjs\': \'sockjs\' | \'ws\'</code> <code>object</code></p>\n<blockquote class="warning">\n<p><code>transportMode</code> is an experimental option, meaning its usage could potentially change without warning.</p>\n</blockquote>\n<blockquote class="tip">\n<p>Providing a string to <code>devServer.transportMode</code> is a shortcut to setting both <code>devServer.transportMode.client</code> and <code>devServer.transportMode.server</code> to the given string value.</p>\n</blockquote>\n<p>This option allows us either to choose the current <code>devServer</code> transport mode for client/server individually or to provide custom client/server implementation. This allows to specify how browser or other client communicates with the <code>devServer</code>.</p>\n<p>The current default mode is <a href="https://www.npmjs.com/package/sockjs"><code>\'sockjs\'</code></a>. This mode uses <a href="https://github.com/sockjs/sockjs-node">SockJS-node</a> as a server, and <a href="https://www.npmjs.com/package/sockjs-client">SockJS-client</a> on the client.</p>\n<p><code>\'ws\'</code> mode will become the default mode in the next major <code>devServer</code> version. This mode uses <a href="https://www.npmjs.com/package/ws">ws</a> as a server, and native WebSockets on the client.</p>\n<p>Use <code>\'ws\'</code> mode:</p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    transportMode<span class="token punctuation">:</span> <span class="token string">\'ws\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<blockquote class="tip">\n<p>When providing a custom client and server implementation make sure that they are compatible with one another to communicate successfully.</p>\n</blockquote>\n<h3 id="devservertransportmodeclient"><code>devServer.transportMode.client</code><a href="#devservertransportmodeclient" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>string</code> <code>path</code></p>\n<p>To create a custom client implementation, create a class that extends <a href="https://github.com/webpack/webpack-dev-server/blob/master/client-src/clients/BaseClient.js"><code>BaseClient</code></a>.</p>\n<p>Using path to <code>CustomClient.js</code>, a custom WebSocket client implementation, along with the compatible <code>\'ws\'</code> server:</p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    transportMode<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      client<span class="token punctuation">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'./CustomClient\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      server<span class="token punctuation">:</span> <span class="token string">\'ws\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h3 id="devservertransportmodeserver"><code>devServer.transportMode.server</code><a href="#devservertransportmodeserver" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>string</code> <code>path</code> <code>function</code></p>\n<p>To create a custom server implementation, create a class that extends <a href="https://github.com/webpack/webpack-dev-server/blob/master/lib/servers/BaseServer.js"><code>BaseServer</code></a>.</p>\n<p>Using path to <code>CustomServer.js</code>, a custom WebSocket server implementation, along with the compatible <code>\'ws\'</code> client:</p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    transportMode<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      client<span class="token punctuation">:</span> <span class="token string">\'ws\'</span><span class="token punctuation">,</span>\n      server<span class="token punctuation">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'./CustomServer\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Using class exported by <code>CustomServer.js</code>, a custom WebSocket server implementation, along with the compatible <code>\'ws\'</code> client:</p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    transportMode<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      client<span class="token punctuation">:</span> <span class="token string">\'ws\'</span><span class="token punctuation">,</span>\n      server<span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./CustomServer\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Using custom, compatible WebSocket client and server implementations:</p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    transportMode<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      client<span class="token punctuation">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'./CustomClient\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      server<span class="token punctuation">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'./CustomServer\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="devserveruselocalip"><code>devServer.useLocalIp</code><a href="#devserveruselocalip" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>boolean</code></p>\n<p>This option lets the browser open with your local IP.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    useLocalIp<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="hljs language-bash">webpack-dev-server --useLocalIp</code></pre>\n<h2 id="devserverwatchcontentbase"><code>devServer.watchContentBase</code><a href="#devserverwatchcontentbase" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>boolean</code></p>\n<p>Tell dev-server to watch the files served by the <a href="#devservercontentbase"><code>devServer.contentBase</code></a> option. It is disabled by default. When enabled, file changes will trigger a full page reload.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    watchContentBase<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Usage via the CLI</p>\n<pre><code class="hljs language-bash">webpack-dev-server --watch-content-base</code></pre>\n<h2 id="devserverwatchoptions-"><code>devServer.watchOptions</code> ðŸ”‘<a href="#devserverwatchoptions-" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>object</code></p>\n<p>Control options related to watching the files.</p>\n<p>webpack uses the file system to get notified of file changes. In some cases this does not work. For example, when using Network File System (NFS). <a href="https://www.vagrantup.com/">Vagrant</a> also has a lot of problems with this. In these cases, use polling:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    watchOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      poll<span class="token punctuation">:</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>If this is too heavy on the file system, you can change this to an integer to set the interval in milliseconds.</p>\n<p>See <a href="/configuration/watch/">WatchOptions</a> for more options.</p>\n<h2 id="devserverwritetodisk-"><code>devServer.writeToDisk</code> ðŸ”‘<a href="#devserverwritetodisk-" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>boolean = false</code> <code>function (filePath)</code></p>\n<p>Tells <code>devServer</code> to write generated assets to the disk. The output is written to the <a href="/configuration/output/#outputpath">output.path</a> directory.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    writeToDisk<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Providing a <code>Function</code> to <code>devServer.writeToDisk</code> can be used for filtering. The function follows the same premise as <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"><code>Array#filter</code></a> in which a boolean return value tells if the file should be written to disk.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    writeToDisk<span class="token punctuation">:</span> <span class="token punctuation">(</span>filePath<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token operator">/</span>superman\\<span class="token punctuation">.</span>css$<span class="token operator">/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n'}}]);