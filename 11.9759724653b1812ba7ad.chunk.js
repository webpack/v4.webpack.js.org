(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{267:function(n,e,a){"use strict";a.r(e),e.default='<p>The <code>Compilation</code> module is used by the <code>Compiler</code> to create new compilations\n(or builds). A <code>compilation</code> instance has access to all modules and their\ndependencies (most of which are circular references). It is the literal\ncompilation of all the modules in the dependency graph of an application.\nDuring the compilation phase, modules are loaded, sealed, optimized, chunked,\nhashed and restored.</p>\n<p>The <code>Compilation</code> class also extends <code>Tapable</code> and provides the following\nlifecycle hooks. They can be tapped the same way as compiler hooks:</p>\n<pre><code class="hljs language-js">compilation<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>someHook<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>As with the <code>compiler</code>, <code>tapAsync</code> and <code>tapPromise</code> may also be available\ndepending on the type of hook.</p>\n<h3 id="buildmodule"><code>buildModule</code><a href="#buildmodule" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<p>Triggered before a module build has started, can be used to modify the module.</p>\n<ul>\n<li>Callback Parameters: <code>module</code></li>\n</ul>\n<pre><code class="hljs language-js">compilation<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>buildModule<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">\'SourceMapDevToolModuleOptionsPlugin\'</span><span class="token punctuation">,</span>\n  module <span class="token operator">=></span> <span class="token punctuation">{</span>\n    module<span class="token punctuation">.</span>useSourceMap <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h3 id="rebuildmodule"><code>rebuildModule</code><a href="#rebuildmodule" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<p>Fired before rebuilding a module.</p>\n<ul>\n<li>Callback Parameters: <code>module</code></li>\n</ul>\n<h3 id="failedmodule"><code>failedModule</code><a href="#failedmodule" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<p>Run when a module build has failed.</p>\n<ul>\n<li>Callback Parameters: <code>module</code> <code>error</code></li>\n</ul>\n<h3 id="succeedmodule"><code>succeedModule</code><a href="#succeedmodule" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<p>Executed when a module has been built successfully.</p>\n<ul>\n<li>Callback Parameters: <code>module</code></li>\n</ul>\n<h3 id="finishmodules"><code>finishModules</code><a href="#finishmodules" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>AsyncSeriesHook</code></p>\n<p>Called when all modules have been built without errors.</p>\n<ul>\n<li>Callback Parameters: <code>modules</code></li>\n</ul>\n<h3 id="finishrebuildingmodule"><code>finishRebuildingModule</code><a href="#finishrebuildingmodule" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<p>Executed when a module has been rebuilt, in case of both success or with errors.</p>\n<ul>\n<li>Callback Parameters: <code>module</code></li>\n</ul>\n<h3 id="seal"><code>seal</code><a href="#seal" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<p>Fired when the compilation stops accepting new modules.</p>\n<h3 id="unseal"><code>unseal</code><a href="#unseal" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<p>Fired when a compilation begins accepting new modules.</p>\n<h3 id="optimizedependenciesbasic"><code>optimizeDependenciesBasic</code><a href="#optimizedependenciesbasic" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<blockquote class="warning">\n<p>This hook will be removed in v5.0.0</p>\n</blockquote>\n<p>Parameters: <code>modules</code></p>\n<h3 id="optimizedependencies"><code>optimizeDependencies</code><a href="#optimizedependencies" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>Fired at the beginning of dependency optimization.</p>\n<ul>\n<li>Callback Parameters: <code>modules</code></li>\n</ul>\n<h3 id="optimizedependenciesadvanced"><code>optimizeDependenciesAdvanced</code><a href="#optimizedependenciesadvanced" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<blockquote class="warning">\n<p>This hook will be removed in v5.0.0</p>\n</blockquote>\n<ul>\n<li>Callback Parameters: <code>modules</code></li>\n</ul>\n<h3 id="afteroptimizedependencies"><code>afterOptimizeDependencies</code><a href="#afteroptimizedependencies" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<p>Fired after the dependency optimization.</p>\n<ul>\n<li>Callback Parameters: <code>modules</code></li>\n</ul>\n<h3 id="optimize"><code>optimize</code><a href="#optimize" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<p>Triggered at the beginning of the optimization phase.</p>\n<h3 id="optimizemodulesbasic"><code>optimizeModulesBasic</code><a href="#optimizemodulesbasic" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<blockquote class="warning">\n<p>This hook will be removed in v5.0.0</p>\n</blockquote>\n<ul>\n<li>Callback Parameters: <code>modules</code></li>\n</ul>\n<h3 id="optimizemodules"><code>optimizeModules</code><a href="#optimizemodules" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>Called at the beginning of the modules optimization phase. A plugin can tap into this hook to perform modules optimizations.</p>\n<ul>\n<li>Callback Parameters: <code>modules</code></li>\n</ul>\n<h3 id="optimizemodulesadvanced"><code>optimizeModulesAdvanced</code><a href="#optimizemodulesadvanced" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<blockquote class="warning">\n<p>This hook will be removed in v5.0.0</p>\n</blockquote>\n<ul>\n<li>Callback Parameters: <code>modules</code></li>\n</ul>\n<h3 id="afteroptimizemodules"><code>afterOptimizeModules</code><a href="#afteroptimizemodules" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<p>Called after modules optimization has completed.</p>\n<ul>\n<li>Callback Parameters: <code>modules</code></li>\n</ul>\n<h3 id="optimizechunksbasic"><code>optimizeChunksBasic</code><a href="#optimizechunksbasic" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<blockquote class="warning">\n<p>This hook will be removed in v5.0.0</p>\n</blockquote>\n<ul>\n<li>Callback Parameters: <code>chunks</code></li>\n</ul>\n<h3 id="optimizechunks"><code>optimizeChunks</code><a href="#optimizechunks" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>Called at the beginning of the chunks optimizion phase. A plugin can tap into this hook to perform chunks optimizations.</p>\n<ul>\n<li>Callback Parameters: <code>chunks</code></li>\n</ul>\n<h3 id="optimizechunksadvanced"><code>optimizeChunksAdvanced</code><a href="#optimizechunksadvanced" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<blockquote class="warning">\n<p>This hook will be removed in v5.0.0</p>\n</blockquote>\n<ul>\n<li>Callback Parameters: <code>chunks</code></li>\n</ul>\n<h3 id="afteroptimizechunks"><code>afterOptimizeChunks</code><a href="#afteroptimizechunks" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<p>Fired after chunk optimization has completed.</p>\n<ul>\n<li>Callback Parameters: <code>chunks</code></li>\n</ul>\n<h3 id="optimizetree"><code>optimizeTree</code><a href="#optimizetree" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>AsyncSeriesHook</code></p>\n<p>Called before optimizing the dependency tree. A plugin can tap into this hook to perform a dependency tree optimization.</p>\n<ul>\n<li>Callback Parameters: <code>chunks</code> <code>modules</code></li>\n</ul>\n<h3 id="afteroptimizetree"><code>afterOptimizeTree</code><a href="#afteroptimizetree" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<p>Called after the dependency tree optimization has completed with success.</p>\n<ul>\n<li>Callback Parameters: <code>chunks</code> <code>modules</code></li>\n</ul>\n<h3 id="optimizechunkmodulesbasic"><code>optimizeChunkModulesBasic</code><a href="#optimizechunkmodulesbasic" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<blockquote class="warning">\n<p>This hook will be removed in v5.0.0</p>\n</blockquote>\n<ul>\n<li>Callback Parameters: <code>chunks</code> <code>modules</code></li>\n</ul>\n<h3 id="optimizechunkmodules"><code>optimizeChunkModules</code><a href="#optimizechunkmodules" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>Called after the tree optimization, at the beginning of the chunk modules optimization. A plugin can tap into this hook to perform optimizations of chunk modules.</p>\n<ul>\n<li>Callback Parameters: <code>chunks</code> <code>modules</code></li>\n</ul>\n<h3 id="optimizechunkmodulesadvanced"><code>optimizeChunkModulesAdvanced</code><a href="#optimizechunkmodulesadvanced" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<blockquote class="warning">\n<p>This hook will be removed in v5.0.0</p>\n</blockquote>\n<ul>\n<li>Callback Parameters: <code>chunks</code> <code>modules</code></li>\n</ul>\n<h3 id="afteroptimizechunkmodules"><code>afterOptimizeChunkModules</code><a href="#afteroptimizechunkmodules" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<p>Called after the chunkmodules optimization has successfully completed.</p>\n<ul>\n<li>Callback Parameters: <code>chunks</code> <code>modules</code></li>\n</ul>\n<h3 id="shouldrecord"><code>shouldRecord</code><a href="#shouldrecord" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>Called to determine whether or not to store records. Returning anything <code>!== false</code> will prevent every other "record" hook from being executed (<a href="#record"><code>record</code></a>, <a href="#recordmodules"><code>recordModules</code></a>, <a href="#recordchunks"><code>recordChunks</code></a> and <a href="#recordhash"><code>recordHash</code></a>).</p>\n<h3 id="revivemodules"><code>reviveModules</code><a href="#revivemodules" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<p>Restore module information from records.</p>\n<ul>\n<li>Callback Parameters: <code>modules</code> <code>records</code></li>\n</ul>\n<h3 id="optimizemoduleorder"><code>optimizeModuleOrder</code><a href="#optimizemoduleorder" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<blockquote class="warning">\n<p>This hook will be removed in v5.0.0</p>\n</blockquote>\n<p>Sort the modules from most to least important.</p>\n<ul>\n<li>Callback Parameters: <code>modules</code></li>\n</ul>\n<h3 id="advancedoptimizemoduleorder"><code>advancedOptimizeModuleOrder</code><a href="#advancedoptimizemoduleorder" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<blockquote class="warning">\n<p>This hook will be removed in v5.0.0</p>\n</blockquote>\n<ul>\n<li>Callback Parameters: <code>modules</code></li>\n</ul>\n<h3 id="beforemoduleids"><code>beforeModuleIds</code><a href="#beforemoduleids" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<p>Executed before assigning an <code>id</code> to each module.</p>\n<ul>\n<li>Callback Parameters: <code>modules</code></li>\n</ul>\n<h3 id="moduleids"><code>moduleIds</code><a href="#moduleids" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<p>Called to assign an <code>id</code> to each module.</p>\n<ul>\n<li>Callback Parameters: <code>modules</code></li>\n</ul>\n<h3 id="optimizemoduleids"><code>optimizeModuleIds</code><a href="#optimizemoduleids" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<p>Called at the beginning of the modules <code>id</code> optimization.</p>\n<ul>\n<li>Callback Parameters: <code>modules</code></li>\n</ul>\n<h3 id="afteroptimizemoduleids"><code>afterOptimizeModuleIds</code><a href="#afteroptimizemoduleids" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<p>Called when the modules <code>id</code> optimization phase has completed.</p>\n<ul>\n<li>Callback Parameters: <code>modules</code></li>\n</ul>\n<h3 id="revivechunks"><code>reviveChunks</code><a href="#revivechunks" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<p>Restore chunk information from records.</p>\n<ul>\n<li>Callback Parameters: <code>chunks</code> <code>records</code></li>\n</ul>\n<h3 id="optimizechunkorder"><code>optimizeChunkOrder</code><a href="#optimizechunkorder" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<blockquote class="warning">\n<p>This hook will be removed in v5.0.0</p>\n</blockquote>\n<p>Sort the chunks in from most to least important.</p>\n<ul>\n<li>Callback Parameters: <code>chunks</code></li>\n</ul>\n<h3 id="beforechunkids"><code>beforeChunkIds</code><a href="#beforechunkids" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<p>Executed before assigning an <code>id</code> to each chunk.</p>\n<ul>\n<li>Callback Parameters: <code>chunks</code></li>\n</ul>\n<h3 id="chunkids"><code>chunkIds</code><a href="#chunkids" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<blockquote class="tip">\n<p>This hook will be available in v5.0.0</p>\n</blockquote>\n<p>Called to assign an <code>id</code> to each chunk.</p>\n<ul>\n<li>Callback Parameters: <code>modules</code></li>\n</ul>\n<h3 id="beforeoptimizechunkids"><code>beforeOptimizeChunkIds</code><a href="#beforeoptimizechunkids" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<blockquote class="tip">\n<p>This hook will be available in v5.0.0</p>\n</blockquote>\n<p>Fired before chunks <code>id</code> optimization.</p>\n<ul>\n<li>Callback Parameters: <code>chunks</code></li>\n</ul>\n<h3 id="optimizechunkids"><code>optimizeChunkIds</code><a href="#optimizechunkids" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<p>Called at the beginning of the chunks <code>id</code> optimization phase.</p>\n<ul>\n<li>Callback Parameters: <code>chunks</code></li>\n</ul>\n<h3 id="afteroptimizechunkids"><code>afterOptimizeChunkIds</code><a href="#afteroptimizechunkids" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<p>Triggered after chunk <code>id</code> optimization has finished.</p>\n<ul>\n<li>Callback Parameters: <code>chunks</code></li>\n</ul>\n<h3 id="recordmodules"><code>recordModules</code><a href="#recordmodules" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<p>Store module info to the records. This is only triggered if <a href="#shouldrecord"><code>shouldRecord</code></a> returns a truthy value.</p>\n<ul>\n<li>Callback Parameters: <code>modules</code> <code>records</code></li>\n</ul>\n<h3 id="recordchunks"><code>recordChunks</code><a href="#recordchunks" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<p>Store chunk info to the records. This is only triggered if <a href="#shouldrecord"><code>shouldRecord</code></a> returns a truthy value.</p>\n<ul>\n<li>Callback Parameters: <code>chunks</code> <code>records</code></li>\n</ul>\n<h3 id="optimizecodegeneration"><code>optimizeCodeGeneration</code><a href="#optimizecodegeneration" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<blockquote class="tip">\n<p>This hook will be available in v5.0.0</p>\n</blockquote>\n<p>A plugin can tap into this hook to optimize the generated code.</p>\n<ul>\n<li>Callback Parameters: <code>modules</code></li>\n</ul>\n<h3 id="beforemodulehash"><code>beforeModuleHash</code><a href="#beforemodulehash" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<blockquote class="tip">\n<p>This hook will be available in v5.0.0</p>\n</blockquote>\n<p>Called before hashing modules.</p>\n<h3 id="aftermodulehash"><code>afterModuleHash</code><a href="#aftermodulehash" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<blockquote class="tip">\n<p>This hook will be available in v5.0.0</p>\n</blockquote>\n<p>Called after hashing modules.</p>\n<h3 id="beforeruntimerequirements"><code>beforeRuntimeRequirements</code><a href="#beforeruntimerequirements" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<blockquote class="tip">\n<p>This hook will be available in v5.0.0</p>\n</blockquote>\n<p>Called before processing the modules required at runtime.</p>\n<ul>\n<li>Callback Parameters: <code>entrypoints</code></li>\n</ul>\n<h3 id="afterruntimerequirements"><code>afterRuntimeRequirements</code><a href="#afterruntimerequirements" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<blockquote class="tip">\n<p>This hook will be available in v5.0.0</p>\n</blockquote>\n<p>Called after processing the runtime requirements.</p>\n<h3 id="beforehash"><code>beforeHash</code><a href="#beforehash" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<p>Called before the compilation is hashed.</p>\n<h3 id="afterhash"><code>afterHash</code><a href="#afterhash" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<p>Called after the compilation is hashed.</p>\n<h3 id="recordhash"><code>recordHash</code><a href="#recordhash" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<p>Store information about record hash to the <code>records</code>. This is only triggered if <a href="#shouldrecord"><code>shouldRecord</code></a> returns a truthy value.</p>\n<ul>\n<li>Callback Parameters: <code>records</code></li>\n</ul>\n<h3 id="record"><code>record</code><a href="#record" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<p>Store information about the <code>compilation</code> to the <code>records</code>. This is only triggered if <a href="#shouldrecord"><code>shouldRecord</code></a> returns a truthy value.</p>\n<ul>\n<li>Callback Parameters: <code>compilation</code> <code>records</code></li>\n</ul>\n<h3 id="beforemoduleassets"><code>beforeModuleAssets</code><a href="#beforemoduleassets" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<p>Executed before module assets creation.</p>\n<h3 id="additionalchunkassets"><code>additionalChunkAssets</code><a href="#additionalchunkassets" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<p>Create additional assets for the chunks.</p>\n<ul>\n<li>Callback Parameters: <code>chunks</code></li>\n</ul>\n<h3 id="shouldgeneratechunkassets"><code>shouldGenerateChunkAssets</code><a href="#shouldgeneratechunkassets" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>Called to determine wheter or not generate chunks assets. Returning anything <code>!== false</code> will allow chunk assets generation.</p>\n<h3 id="beforechunkassets"><code>beforeChunkAssets</code><a href="#beforechunkassets" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<p>Executed before creating the chunks assets.</p>\n<h3 id="additionalassets"><code>additionalAssets</code><a href="#additionalassets" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>AsyncSeriesHook</code></p>\n<p>Create additional assets for the compilation. This hook can be used to download\nan image, for example:</p>\n<pre><code class="hljs language-js">compilation<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>additionalAssets<span class="token punctuation">.</span><span class="token function">tapAsync</span><span class="token punctuation">(</span><span class="token string">\'MyPlugin\'</span><span class="token punctuation">,</span> callback <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token function">download</span><span class="token punctuation">(</span><span class="token string">\'https://img.shields.io/npm/v/webpack.svg\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      compilation<span class="token punctuation">.</span>assets<span class="token punctuation">[</span><span class="token string">\'webpack-version.svg\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">toAsset</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'[webpack-example-plugin] Unable to download the image\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h3 id="optimizechunkassets"><code>optimizeChunkAssets</code><a href="#optimizechunkassets" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>AsyncSeriesHook</code></p>\n<p>Optimize any chunk assets. The assets are stored in <code>compilation.assets</code>. A\n<code>Chunk</code> has a property <code>files</code> which points to all files created by a chunk.\nAny additional chunk assets are stored in <code>compilation.additionalChunkAssets</code>.</p>\n<ul>\n<li>Callback Parameters: <code>chunks</code></li>\n</ul>\n<p>Here\'s an example that simply adds a banner to each chunk.</p>\n<pre><code class="hljs language-js">compilation<span class="token punctuation">.</span>hooks\n  <span class="token punctuation">.</span>optimizeChunkAssets\n  <span class="token punctuation">.</span><span class="token function">tapAsync</span><span class="token punctuation">(</span><span class="token string">\'MyPlugin\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>chunks<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    chunks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>chunk <span class="token operator">=></span> <span class="token punctuation">{</span>\n      chunk<span class="token punctuation">.</span>files<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>file <span class="token operator">=></span> <span class="token punctuation">{</span>\n        compilation<span class="token punctuation">.</span>assets<span class="token punctuation">[</span>file<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcatSource</span><span class="token punctuation">(</span>\n          <span class="token string">\'\\/**Sweet Banner**\\/\'</span><span class="token punctuation">,</span>\n          <span class="token string">\'\\n\'</span><span class="token punctuation">,</span>\n          compilation<span class="token punctuation">.</span>assets<span class="token punctuation">[</span>file<span class="token punctuation">]</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h3 id="afteroptimizechunkassets"><code>afterOptimizeChunkAssets</code><a href="#afteroptimizechunkassets" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<p>The chunk assets have been optimized.</p>\n<ul>\n<li>Callback Parameters: <code>chunks</code></li>\n</ul>\n<p>Here\'s an example plugin from <a href="https://github.com/boopathi">@boopathi</a> that outputs exactly what went into each chunk.</p>\n<pre><code class="hljs language-js">compilation<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>afterOptimizeChunkAssets<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">\'MyPlugin\'</span><span class="token punctuation">,</span> chunks <span class="token operator">=></span> <span class="token punctuation">{</span>\n  chunks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>chunk <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      id<span class="token punctuation">:</span> chunk<span class="token punctuation">.</span>id<span class="token punctuation">,</span>\n      name<span class="token punctuation">:</span> chunk<span class="token punctuation">.</span>name<span class="token punctuation">,</span>\n      includes<span class="token punctuation">:</span> chunk<span class="token punctuation">.</span><span class="token function">getModules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>module <span class="token operator">=></span> module<span class="token punctuation">.</span>request<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h3 id="optimizeassets"><code>optimizeAssets</code><a href="#optimizeassets" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>AsyncSeriesHook</code></p>\n<p>Optimize all assets stored in <code>compilation.assets</code>.</p>\n<ul>\n<li>Callback Parameters: <code>assets</code></li>\n</ul>\n<h3 id="afteroptimizeassets"><code>afterOptimizeAssets</code><a href="#afteroptimizeassets" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<p>The assets have been optimized.</p>\n<ul>\n<li>Callback Parameters: <code>assets</code></li>\n</ul>\n<h3 id="needadditionalseal"><code>needAdditionalSeal</code><a href="#needadditionalseal" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>Called to determine if the compilation needs to be unsealed to include other files.</p>\n<h3 id="afterseal"><code>afterSeal</code><a href="#afterseal" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>AsyncSeriesHook</code></p>\n<p>Executed right after <code>needAdditionalSeal</code>.</p>\n<h3 id="chunkhash"><code>chunkHash</code><a href="#chunkhash" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<p>Triggered to emit the hash for each chunk.</p>\n<ul>\n<li>Callback Parameters: <code>chunk</code> <code>chunkHash</code></li>\n</ul>\n<h3 id="moduleasset"><code>moduleAsset</code><a href="#moduleasset" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<p>Called when an asset from a module was added to the compilation.</p>\n<ul>\n<li>Callback Parameters: <code>module</code> <code>filename</code></li>\n</ul>\n<h3 id="chunkasset"><code>chunkAsset</code><a href="#chunkasset" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<p>Triggered when an asset from a chunk was added to the compilation.</p>\n<ul>\n<li>Callback Parameters: <code>chunk</code> <code>filename</code></li>\n</ul>\n<h3 id="assetpath"><code>assetPath</code><a href="#assetpath" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncWaterfallHook</code></p>\n<p>Called to determine the path of an asset.</p>\n<ul>\n<li>Callback Parameters: <code>path</code> <code>options</code></li>\n</ul>\n<h3 id="needadditionalpass"><code>needAdditionalPass</code><a href="#needadditionalpass" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>Called to determine if a asset need to be processed further after being emitted.</p>\n<h3 id="childcompiler"><code>childCompiler</code><a href="#childcompiler" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<p>Executed after setting up a child compiler.</p>\n<ul>\n<li>Callback Parameters: <code>childCompiler</code> <code>compilerName</code> <code>compilerIndex</code></li>\n</ul>\n<h3 id="normalmoduleloader"><code>normalModuleLoader</code><a href="#normalmoduleloader" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncHook</code></p>\n<blockquote class="warning">\n<p>This hook will be moved in v5.0.0 to <code>NormalModule.getCompilationHooks(compilation).loader</code></p>\n</blockquote>\n<p>The normal module loader is the function that actually loads all the modules</p>\n<p>in the module graph (one-by-one).</p>\n<ul>\n<li>Callback Parameters: <code>loaderContext</code> <code>module</code></li>\n</ul>\n<h3 id="dependencyreference"><code>dependencyReference</code><a href="#dependencyreference" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncWaterfallHook</code></p>\n<p>This hooks allows changing the references reported by dependencies.</p>\n<ul>\n<li>Callback Parameters: <code>depRef</code> <code>dependency</code> <code>module</code></li>\n</ul>\n<blockquote class="warning">\n<p>The <code>module</code> parameter will be removed in v5.0.0</p>\n</blockquote>\n'}}]);