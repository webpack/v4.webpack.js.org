(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{345:function(n,a,s){"use strict";s.r(a),a.default='<p>It can be hard to set up a complex webpack configuration for the first time. Writing advanced configurations to optimize performance is quite hard. The <code>init</code> feature is designed to support people that want to create their own configuration or initializing projects that other people create.</p>\n<h2 id="creating-a-scaffold">Creating a scaffold<a href="#creating-a-scaffold" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>Before writing a <code>webpack-cli</code> scaffold, think about what you\'re trying to achieve. Do you want a "general" scaffold that could be used by any project or type of app? Do you want something focused, like a scaffold that writes both your <code>webpack.config.js</code> and your framework code? It\'s also useful to think about the user experience for your scaffold.</p>\n<p><code>webpack-cli</code> offers an interactive experience to customize the output accordingly. For example asking questions like: "What is your entry point?".</p>\n<h3 id="writing-a-scaffold">Writing a scaffold<a href="#writing-a-scaffold" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>There are many resources where you can learn how to write a scaffold, you can start from <a href="/contribute/writing-a-scaffold/">Writing a Scaffold</a></p>\n<p><code>webpack-scaffold</code> is a utility suite for creating scaffolds. It contains functions that could be used to create a scaffold.</p>\n<h3 id="running-a-scaffold">Running a scaffold<a href="#running-a-scaffold" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>A scaffold can be executed using <code>webpack-cli init</code>:</p>\n<pre><code class="hljs language-bash">webpack-cli init <span class="token operator">&#x3C;</span>your-scaffold<span class="token operator">></span></code></pre>\n<h4 id="running-a-scaffold-locally">Running a scaffold locally<a href="#running-a-scaffold-locally" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>When the scaffold package is in your local file system you should point <code>init</code> to its path:</p>\n<pre><code class="hljs language-bash">webpack-cli init path/to/your/scaffold</code></pre>\n<p>Or you can create a global module and symlink to the local one:</p>\n<ul>\n<li>Using npm</li>\n</ul>\n<pre><code class="hljs language-bash"><span class="token function">cd</span> path/to/my-scaffold\n<span class="token function">npm</span> <span class="token function">link</span>\nwebpack-cli init my-scaffold</code></pre>\n<ul>\n<li>Using yarn</li>\n</ul>\n<pre><code class="hljs language-bash"><span class="token function">cd</span> path/to/my-scaffold\nyarn <span class="token function">link</span>\nwebpack-cli init my-scaffold</code></pre>\n<h4 id="running-a-scaffold-from-npm">Running a scaffold from npm<a href="#running-a-scaffold-from-npm" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>If the package is available from npm, its name must begin with <code>webpack-scaffold</code> and can be used by running:</p>\n<pre><code class="hljs language-bash">webpack-cli init webpack-scaffold-yourpackage</code></pre>\n<h2 id="api">API<a href="#api" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>To create a <code>scaffold</code>, you must create a <a href="http://yeoman.io/authoring/"><code>yeoman-generator</code></a>. Thanks to it, you can optionally extend your generator to include methods from the <a href="http://yeoman.io/learning/">Yeoman API</a>. It\'s worth noting that we support all the properties of a regular webpack configuration. In order for us to do this, there\'s a thing you need to remember:</p>\n<blockquote class="warning">\n<p>Objects are made using strings, while strings are made using double strings. This means that in order for you to create a string, you have to wrap it inside another string for us to validate it correctly.</p>\n</blockquote>\n<h3 id="required">Required<a href="#required" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<ul>\n<li><a href="#optsenvconfigurationrequired"><code>opts.env.configuration</code>(required)</a></li>\n<li><a href="#optsenvconfigurationmyobj-required"><code>opts.env.configuration.myObj</code> (required)</a></li>\n<li><a href="#myobjwebpackoptions-required"><code>myObj.webpackOptions</code> (required)</a></li>\n<li><a href="#writing-required"><code>writing</code> (required)</a></li>\n</ul>\n<h3 id="optional">Optional<a href="#optional" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<ul>\n<li><a href="#myobjmerge-optional">myObj.merge</a></li>\n<li><a href="#myobjtopscopeoptional">myObj.topScope</a></li>\n<li><a href="#myobjconfignameoptional">myObj.configName</a></li>\n</ul>\n<h3 id="optsenvconfigurationrequired"><code>opts.env.configuration</code>(required)<a href="#optsenvconfigurationrequired" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>object</code></p>\n<p>This is the entry point your configuration, initialize it inside the constructor of your generator in order for the CLI to work:</p>\n<pre><code class="hljs language-js"><span class="token keyword">class</span> <span class="token class-name">MyScaffold</span> <span class="token keyword">extends</span> <span class="token class-name">Generator</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> opts<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    opts<span class="token punctuation">.</span>env<span class="token punctuation">.</span>configuration <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n<h3 id="optsenvconfigurationmyobj-required"><code>opts.env.configuration.myObj</code> (required)<a href="#optsenvconfigurationmyobj-required" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>object</code></p>\n<p>This is your scaffold, you add the options that the CLI will transform into a webpack configuration here. You can have many different scaffolds named as you prefer, representing different configurations like <code>dev.config</code> or <code>prod.config</code>:</p>\n<pre><code class="hljs language-js"><span class="token keyword">class</span> <span class="token class-name">MyScaffold</span> <span class="token keyword">extends</span> <span class="token class-name">Generator</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> opts<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    opts<span class="token punctuation">.</span>env<span class="token punctuation">.</span>configuration <span class="token operator">=</span> <span class="token punctuation">{</span>\n      dev<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n      prod<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n<h3 id="myobjwebpackoptions-required"><code>myObj.webpackOptions</code> (required)<a href="#myobjwebpackoptions-required" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>object</code></p>\n<p>This object has the same format as a regular webpack <a href="/configuration/">configuration</a>. Declare the properties that you want to scaffold here, e.g. <code>entry</code>, <code>output</code> and <code>context</code>. You can initialize this inside a yeoman method:</p>\n<pre><code class="hljs language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>env<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>webpackOptions <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token punctuation">:</span> <span class="token string">\'\\\'app.js\\\'\'</span><span class="token punctuation">,</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h3 id="writing-required"><code>writing</code> (required)<a href="#writing-required" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>function</code></p>\n<p>For the scaffolding instance to run, you need to write your configuration to a <code>.yo-rc.json</code> file. This could be done using one of the lifecycles in the yeoman generator, such as the <code>writing</code> method:</p>\n<pre><code class="hljs language-js"><span class="token keyword">class</span> <span class="token class-name">MyScaffold</span> <span class="token keyword">extends</span> <span class="token class-name">Generator</span> <span class="token punctuation">{</span>\n  <span class="token function">writing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">\'configuration\'</span><span class="token punctuation">,</span> myObj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n<h3 id="myobjmerge-optional"><code>myObj.merge</code> (optional)<a href="#myobjmerge-optional" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>string</code></p>\n<p>If you want to use <a href="https://github.com/survivejs/webpack-merge"><code>webpack-merge</code></a>, you can set the <code>merge</code> property of <code>myObj</code> to the name of the configuration you want to merge it with:</p>\n<pre><code class="hljs language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>env<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>merge <span class="token operator">=</span> <span class="token string">\'myConfig\'</span><span class="token punctuation">;</span></code></pre>\n<h3 id="myobjtopscopeoptional"><code>myObj.topScope</code>(optional)<a href="#myobjtopscopeoptional" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>[string]</code></p>\n<p>The <code>topScope</code> property is where you write all the code needed by your configuration, like module imports and functions/variables declarations:</p>\n<pre><code class="hljs language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>env<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>topScope <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token string">\'const webpack = require("webpack");\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'const path = require("path");\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>\n<h3 id="myobjconfignameoptional"><code>myObj.configName</code>(optional)<a href="#myobjconfignameoptional" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>string</code></p>\n<p><code>configName</code> allows you to customize the name of your configuration file. For example you can name it <code>webpack.base.js</code> instead of the default <code>webpack.config.js</code>:</p>\n<pre><code class="hljs language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>env<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>configName <span class="token operator">=</span> <span class="token string">\'base\'</span><span class="token punctuation">;</span></code></pre>\n'}}]);