(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{360:function(n,s,a){"use strict";a.r(s),s.default='<p><strong>webpack loader to extract HTML and CSS from the bundle.</strong></p>\n<p><a href="https://www.npmjs.com/package/extract-loader"><img src="https://img.shields.io/npm/v/extract-loader.svg"></a>\n<a href="https://www.npmjs.com/package/extract-loader"><img src="https://img.shields.io/npm/dm/extract-loader.svg"></a>\n<a href="https://david-dm.org/peerigon/extract-loader"><img src="https://david-dm.org/peerigon/extract-loader.svg" alt="Dependency Status"></a>\n<a href="https://travis-ci.org/peerigon/extract-loader"><img src="https://travis-ci.org/peerigon/extract-loader.svg?branch=master" alt="Build Status"></a>\n<a href="https://coveralls.io/r/peerigon/extract-loader?branch=master"><img src="https://img.shields.io/coveralls/peerigon/extract-loader.svg" alt="Coverage Status"></a></p>\n<p>The extract-loader evaluates the given source code on the fly and returns the result as string. Its main use-case is to resolve urls within HTML and CSS coming from their respective loaders. Use the <a href="/loaders/file-loader/">file-loader</a> to emit the extract-loader\'s result as separate file.</p>\n<pre><code class="hljs language-javascript"><span class="token keyword">import</span> stylesheetUrl <span class="token keyword">from</span> <span class="token string">"file-loader!extract-loader!css-loader!main.css"</span><span class="token punctuation">;</span>\n<span class="token comment">// stylesheetUrl will now be the hashed url to the final stylesheet</span></code></pre>\n<p>The extract-loader works similar to the <a href="/plugins/extract-text-webpack-plugin/">extract-text-webpack-plugin</a> and the <a href="/plugins/mini-css-extract-plugin/">mini-css-extract-plugin</a> and is meant as a lean alternative to it. When evaluating the source code, it provides a fake context which was especially designed to cope with the code generated by the <a href="/loaders/html-loader/">html-</a> or the <a href="/loaders/css-loader/">css-loader</a>. Thus it might not work in other situations.</p>\n<br>\n<h2 id="installation">Installation<a href="#installation" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<pre><code class="hljs language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> extract-loader --save-dev</code></pre>\n<br>\n<h2 id="examples">Examples<a href="#examples" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<h3 id="extracting-a-maincss"><a href="https://github.com/peerigon/extract-loader/tree/master/examples/main-css">Extracting a main.css</a><a href="#extracting-a-maincss" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>Bundling CSS with webpack has some nice advantages like referencing images and fonts with hashed urls or <a href="/concepts/hot-module-replacement">hot module replacement</a> in development. In production, on the other hand, it\'s not a good idea to apply your stylesheets depending on JS execution. Rendering may be delayed or even a <a href="https://en.wikipedia.org/wiki/Flash_of_unstyled_content">FOUC</a> might be visible. Thus it\'s still better to have them as separate files in your final production build.</p>\n<p>With the extract-loader, you are able to reference your <code>main.css</code> as regular <code>entry</code>. The following <code>webpack.config.js</code> shows how to load your styles with the <a href="/loaders/style-loader/">style-loader</a> in development and as separate file in production.</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> mode <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> pathToMainCss <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"./app/main.css"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> loaders <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n        loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">===</span> <span class="token string">"production"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        loaders<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>\n            <span class="token string">"file-loader"</span><span class="token punctuation">,</span>\n            <span class="token string">"extract-loader"</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        loaders<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">"style-loader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        mode<span class="token punctuation">,</span>\n        entry<span class="token punctuation">:</span> pathToMainCss<span class="token punctuation">,</span>\n        module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n                <span class="token punctuation">{</span>\n                    test<span class="token punctuation">:</span> pathToMainCss<span class="token punctuation">,</span>\n                    loaders<span class="token punctuation">:</span> loaders\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h3 id="extracting-the-indexhtml"><a href="https://github.com/peerigon/extract-loader/tree/master/examples/index-html">Extracting the index.html</a><a href="#extracting-the-indexhtml" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>You can even add your <code>index.html</code> as <code>entry</code> and reference your stylesheets from there. In that case, tell the html-loader to also pick up <code>link:href</code>:</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> mode <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> pathToMainJs <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"./app/main.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> pathToIndexHtml <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"./app/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        mode<span class="token punctuation">,</span>\n        entry<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n            pathToMainJs<span class="token punctuation">,</span>\n            pathToIndexHtml\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n                <span class="token punctuation">{</span>\n                    test<span class="token punctuation">:</span> pathToIndexHtml<span class="token punctuation">,</span>\n                    use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n                        <span class="token string">"file-loader"</span><span class="token punctuation">,</span>\n                        <span class="token string">"extract-loader"</span><span class="token punctuation">,</span>\n                        <span class="token punctuation">{</span>\n                            loader<span class="token punctuation">:</span> <span class="token string">"html-loader"</span><span class="token punctuation">,</span>\n                            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                                attrs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"img:src"</span><span class="token punctuation">,</span> <span class="token string">"link:href"</span><span class="token punctuation">]</span>\n                            <span class="token punctuation">}</span>\n                        <span class="token punctuation">}</span>\n                    <span class="token punctuation">]</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token punctuation">{</span>\n                    test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n                    use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n                        <span class="token string">"file-loader"</span><span class="token punctuation">,</span>\n                        <span class="token string">"extract-loader"</span><span class="token punctuation">,</span>\n                        <span class="token punctuation">{</span>\n                            loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n                            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                                sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span>\n                            <span class="token punctuation">}</span>\n                        <span class="token punctuation">}</span>\n                    <span class="token punctuation">]</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token punctuation">{</span>\n                    test<span class="token punctuation">:</span> <span class="token regex">/\\.jpg$/</span><span class="token punctuation">,</span>\n                    use<span class="token punctuation">:</span> <span class="token string">"file-loader"</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<p>turns</p>\n<pre><code class="hljs language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>head</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main.css<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>head</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>body</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hi.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>html</span><span class="token punctuation">></span></span></code></pre>\n<p>into</p>\n<pre><code class="hljs language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>head</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>7c57758b88216530ef48069c2a4c685a.css<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>head</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>body</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6ac05174ae9b62257ff3aa8be43cf828.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>html</span><span class="token punctuation">></span></span></code></pre>\n<br>\n<h2 id="source-maps">Source Maps<a href="#source-maps" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>If you want source maps in your extracted CSS files, you need to set the <a href="https://github.com/webpack-contrib/css-loader#sourcemap"><code>sourceMap</code> option</a> of the <strong>css-loader</strong>:</p>\n<pre><code class="hljs language-js">    <span class="token punctuation">{</span>\n        loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span></code></pre>\n<br>\n<h2 id="options">Options<a href="#options" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>There is currently exactly one option: <code>publicPath</code>.\nIf you are using a relative <code>publicPath</code> in webpack\'s <a href="/configuration/output/#outputpublicpath">output options</a> and extracting to a file with the <code>file-loader</code>, you might need this to account for the location of your extracted file. <code>publicPath</code> may be defined as a string or a function that accepts current <a href="/api/loaders/#the-loader-context">loader context</a> as single argument.</p>\n<p>Example with publicPath option as a string:</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"./dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        publicPath<span class="token punctuation">:</span> <span class="token string">"dist/"</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">{</span>\n                test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n                use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n                    <span class="token punctuation">{</span>\n                        loader<span class="token punctuation">:</span> <span class="token string">"file-loader"</span><span class="token punctuation">,</span>\n                        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                            name<span class="token punctuation">:</span> <span class="token string">"assets/[name].[ext]"</span><span class="token punctuation">,</span>\n                        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">{</span>\n                        loader<span class="token punctuation">:</span> <span class="token string">"extract-loader"</span><span class="token punctuation">,</span>\n                        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                            publicPath<span class="token punctuation">:</span> <span class="token string">"../"</span><span class="token punctuation">,</span>\n                        <span class="token punctuation">}</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">{</span>\n                        loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token punctuation">]</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Example with publicPath option as a function:</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"./dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        publicPath<span class="token punctuation">:</span> <span class="token string">"dist/"</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">{</span>\n                test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n                use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n                    <span class="token punctuation">{</span>\n                        loader<span class="token punctuation">:</span> <span class="token string">"file-loader"</span><span class="token punctuation">,</span>\n                        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                            name<span class="token punctuation">:</span> <span class="token string">"assets/[name].[ext]"</span><span class="token punctuation">,</span>\n                        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">{</span>\n                        loader<span class="token punctuation">:</span> <span class="token string">"extract-loader"</span><span class="token punctuation">,</span>\n                        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                            <span class="token comment">// dynamically return a relative publicPath based on how deep in directory structure the loaded file is in /src/ directory</span>\n                            publicPath<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">\'../\'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">relative</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'src\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'/\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                        <span class="token punctuation">}</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">{</span>\n                        loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token punctuation">]</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>You need another option? Then you should think about:</p>\n<br>\n<h2 id="contributing">Contributing<a href="#contributing" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>From opening a bug report to creating a pull request: <strong>every contribution is appreciated and welcome</strong>. If you\'re planning to implement a new feature or change the api please create an issue first. This way we can ensure that your precious work is not in vain.</p>\n<p>All pull requests should have 100% test coverage (with notable exceptions) and need to pass all tests.</p>\n<ul>\n<li>Call <code>npm test</code> to run the unit tests</li>\n<li>Call <code>npm run coverage</code> to check the test coverage (using <a href="https://github.com/gotwarlost/istanbul">istanbul</a>)</li>\n</ul>\n<br>\n<h2 id="license">License<a href="#license" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>Unlicense</p>\n<h2 id="sponsors">Sponsors<a href="#sponsors" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><a href="https://peerigon.com/"><img src="https://assets.peerigon.com/peerigon/logo/peerigon-logo-flat-spinat.png" width="150" /></a></p>\n'}}]);